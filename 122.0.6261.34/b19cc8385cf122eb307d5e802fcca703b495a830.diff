commit b19cc8385cf122eb307d5e802fcca703b495a830
Author: John Doe <jdoe@email.com>
Date:   Sun Feb 11 23:45:08 2024 +0800

    Allow sandbox to warmup only bcryptprimitives.dll    2023-07-12 14:38:33    865d249ad3b7e0d035876bd4077d20e2e91536fb

diff --git a/sandbox/policy/win/sandbox_warmup.cc b/sandbox/policy/win/sandbox_warmup.cc
index 1c5142a49ceb7..d44e3bd3cfdd7 100644
--- a/sandbox/policy/win/sandbox_warmup.cc
+++ b/sandbox/policy/win/sandbox_warmup.cc
@@ -4,9 +4,6 @@
 
 #include "sandbox/policy/win/sandbox_warmup.h"
 
-#include "base/feature_list.h"
-#include "sandbox/policy/features.h"
-
 #include <windows.h>
 
 // Note: do not copy this to add new uses of RtlGenRandom.
@@ -18,48 +15,19 @@
 #include <NTSecAPI.h>
 #undef SystemFunction036
 
-// Prototype for ProcessPrng.
-// See: https://learn.microsoft.com/en-us/windows/win32/seccng/processprng
-extern "C" {
-BOOL WINAPI ProcessPrng(PBYTE pbData, SIZE_T cbData);
-}
-
 namespace sandbox::policy {
 
-namespace {
-
-// Import bcryptprimitives!ProcessPrng rather than cryptbase!RtlGenRandom to
-// avoid opening a handle to \\Device\KsecDD in the renderer.
-decltype(&ProcessPrng) GetProcessPrng() {
-  HMODULE hmod = LoadLibraryW(L"bcryptprimitives.dll");
-  CHECK(hmod);
-  decltype(&ProcessPrng) process_prng_fn =
-      reinterpret_cast<decltype(&ProcessPrng)>(
-          GetProcAddress(hmod, "ProcessPrng"));
-  CHECK(process_prng_fn);
-  return process_prng_fn;
-}
-
-}  // namespace
-
 void WarmupRandomnessInfrastructure() {
-  BYTE data[1];
-
-  if (base::FeatureList::IsEnabled(
-          sandbox::policy::features::kWinSboxWarmupProcessPrng)) {
-    // TODO(crbug.com/74242) Call a warmup function exposed by boringssl.
-    static decltype(&ProcessPrng) process_prng_fn = GetProcessPrng();
-    BOOL success = process_prng_fn(data, sizeof(data));
-    // ProcessPrng is documented to always return TRUE.
-    CHECK(success);
-  } else {
-    // This loads advapi!SystemFunction036 which is forwarded to
-    // cryptbase!SystemFunction036. This allows boringsll and Chrome to call
-    // RtlGenRandom from within the sandbox. This has the unfortunate side
-    // effect of opening a handle to \\Device\KsecDD which we will later close
-    // in processes that do not need this.
-    RtlGenRandom(data, sizeof(data));
-  }
+  // This loads advapi!SystemFunction036 which is forwarded to
+  // cryptbase!SystemFunction036. This allows boringsll and Chrome to call
+  // RtlGenRandom from within the sandbox. This has the unfortunate side effect
+  // of opening a handle to \\Device\KsecDD which we will later close in
+  // processes that do not need this. Ideally everyone would call ProcessPrng in
+  // bcryptprimitives instead and this warmup can change to load that directly.
+  // TODO(crbug.com/74242) swap boringssl to ProcessPrng from RtlGenRandom.
+  // TODO(crbug.com/74242) swap Chrome to ProcessPrng from RtlGenRandom.
+  char data[1];
+  RtlGenRandom(data, sizeof(data));
 }
 
 }  // namespace sandbox::policy

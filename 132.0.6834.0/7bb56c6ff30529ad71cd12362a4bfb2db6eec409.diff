diff --git a/chrome/common/ppapi_utils.cc b/chrome/common/ppapi_utils.cc
index 6685347e727b1..9bebcc05fbebe 100644
--- a/chrome/common/ppapi_utils.cc
+++ b/chrome/common/ppapi_utils.cc
@@ -73,6 +73,7 @@
 #include "ppapi/c/private/ppb_ext_crx_file_system_private.h"
 #include "ppapi/c/private/ppb_file_io_private.h"
 #include "ppapi/c/private/ppb_file_ref_private.h"
+#include "ppapi/c/private/ppb_flash_font_file.h"
 #include "ppapi/c/private/ppb_host_resolver_private.h"
 #include "ppapi/c/private/ppb_isolated_file_system_private.h"
 #include "ppapi/c/private/ppb_proxy_private.h"
@@ -95,6 +96,7 @@ bool IsSupportedPepperInterface(const char* name) {
     return true;
 
 #include "ppapi/thunk/interfaces_ppb_private.h"
+#include "ppapi/thunk/interfaces_ppb_private_flash.h"
 #include "ppapi/thunk/interfaces_ppb_private_no_permissions.h"
 #include "ppapi/thunk/interfaces_ppb_public_dev.h"
 #include "ppapi/thunk/interfaces_ppb_public_dev_channel.h"
diff --git a/chrome/renderer/BUILD.gn b/chrome/renderer/BUILD.gn
index 0e6d5528548d6..481936d522f8d 100644
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -220,6 +220,8 @@ static_library("renderer") {
     sources += [
       "pepper/chrome_renderer_pepper_host_factory.cc",
       "pepper/chrome_renderer_pepper_host_factory.h",
+      "pepper/pepper_flash_font_file_host.cc",
+      "pepper/pepper_flash_font_file_host.h",
       "pepper/pepper_helper.cc",
       "pepper/pepper_helper.h",
       "pepper/pepper_shared_memory_message_filter.cc",
diff --git a/chrome/renderer/pepper/pepper_flash_font_file_host.cc b/chrome/renderer/pepper/pepper_flash_font_file_host.cc
new file mode 100644
index 0000000000000..f09218589c347
--- /dev/null
+++ b/chrome/renderer/pepper/pepper_flash_font_file_host.cc
@@ -0,0 +1,119 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/renderer/pepper/pepper_flash_font_file_host.h"
+
+#include "base/sys_byteorder.h"
+#include "build/build_config.h"
+#include "content/public/renderer/renderer_ppapi_host.h"
+
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/c/trusted/ppb_browser_font_trusted.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/proxy/ppapi_messages.h"
+#include "ppapi/proxy/serialized_structs.h"
+
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_OPENBSD)
+#include "components/services/font/public/cpp/font_loader.h"
+#include "pdf/font_table_linux.h"
+#elif BUILDFLAG(IS_WIN)
+#include "third_party/skia/include/core/SkFontMgr.h"
+#endif
+
+PepperFlashFontFileHost::PepperFlashFontFileHost(
+    content::RendererPpapiHost* host,
+    PP_Instance instance,
+    PP_Resource resource,
+    const ppapi::proxy::SerializedFontDescription& description,
+    PP_PrivateFontCharset charset)
+    : ResourceHost(host->GetPpapiHost(), instance, resource) {
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+  // The global SkFontConfigInterface is configured and initialized with a
+  // SkFontconfigInterface compatible font_service::FontLoader in
+  // RendererBlinkPlatformImpl (called from RenderThreadImpl::Init) at startup
+  // of the mimehandler process, which is a renderer type process. We can reuse
+  // it here to call a plugin specific font matching method out of process here.
+  // TODO(drott): Find a way to pass this through instead of casting.
+  font_service::FontLoader* font_loader_casted =
+      reinterpret_cast<font_service::FontLoader*>(
+          SkFontConfigInterface::RefGlobal().get());
+  font_loader_casted->MatchFontWithFallback(
+      description.face,
+      description.weight >= PP_BROWSERFONT_TRUSTED_WEIGHT_BOLD,
+      description.italic, charset, PP_BROWSERFONT_TRUSTED_FAMILY_DEFAULT,
+      &font_file_);
+#elif BUILDFLAG(IS_WIN)
+  int weight = description.weight;
+  if (weight == FW_DONTCARE)
+    weight = SkFontStyle::kNormal_Weight;
+  SkFontStyle style(weight, SkFontStyle::kNormal_Width,
+                    description.italic ? SkFontStyle::kItalic_Slant
+                                       : SkFontStyle::kUpright_Slant);
+  sk_sp<SkFontMgr> font_mgr(SkFontMgr::RefDefault());
+
+  typeface_ = sk_sp<SkTypeface>(
+      font_mgr->matchFamilyStyle(description.face.c_str(), style));
+#endif
+}
+
+PepperFlashFontFileHost::~PepperFlashFontFileHost() {}
+
+int32_t PepperFlashFontFileHost::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  PPAPI_BEGIN_MESSAGE_MAP(PepperFlashFontFileHost, msg)
+    PPAPI_DISPATCH_HOST_RESOURCE_CALL(PpapiHostMsg_FlashFontFile_GetFontTable,
+                                      OnGetFontTable)
+  PPAPI_END_MESSAGE_MAP()
+  return PP_ERROR_FAILED;
+}
+
+bool PepperFlashFontFileHost::GetFontData(uint32_t table,
+                                          void* buffer,
+                                          size_t* length) {
+  bool result = false;
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+  if (font_file_.IsValid()) {
+    result =
+        pdf::GetFontTable(font_file_.GetPlatformFile(), table, /*offset=*/0,
+                          reinterpret_cast<uint8_t*>(buffer), length);
+  }
+#elif BUILDFLAG(IS_WIN)
+  if (typeface_) {
+    table = base::ByteSwap(table);
+    if (buffer == NULL) {
+      *length = typeface_->getTableSize(table);
+      if (*length > 0)
+        result = true;
+    } else {
+      size_t new_length = typeface_->getTableData(table, 0, *length, buffer);
+      if (new_length == *length)
+        result = true;
+    }
+  }
+#endif
+  return result;
+}
+
+int32_t PepperFlashFontFileHost::OnGetFontTable(
+    ppapi::host::HostMessageContext* context,
+    uint32_t table) {
+  std::string contents;
+  int32_t result = PP_ERROR_FAILED;
+  size_t length = 0;
+  if (GetFontData(table, NULL, &length)) {
+    contents.resize(length);
+    uint8_t* contents_ptr =
+        reinterpret_cast<uint8_t*>(const_cast<char*>(contents.c_str()));
+    if (GetFontData(table, contents_ptr, &length)) {
+      result = PP_OK;
+    } else {
+      contents.clear();
+    }
+  }
+  context->reply_msg = PpapiPluginMsg_FlashFontFile_GetFontTableReply(contents);
+  return result;
+}
diff --git a/chrome/renderer/pepper/pepper_flash_font_file_host.h b/chrome/renderer/pepper/pepper_flash_font_file_host.h
new file mode 100644
index 0000000000000..e6a9f81ae1949
--- /dev/null
+++ b/chrome/renderer/pepper/pepper_flash_font_file_host.h
@@ -0,0 +1,62 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_RENDERER_PEPPER_PEPPER_FLASH_FONT_FILE_HOST_H_
+#define CHROME_RENDERER_PEPPER_PEPPER_FLASH_FONT_FILE_HOST_H_
+
+#include <stddef.h>
+#include <stdint.h>
+
+#include "build/build_config.h"
+#include "ppapi/c/private/pp_private_font_charset.h"
+#include "ppapi/host/resource_host.h"
+
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_OPENBSD)
+#include "base/files/file.h"
+#elif BUILDFLAG(IS_WIN)
+#include "third_party/skia/include/core/SkRefCnt.h"
+#include "third_party/skia/include/core/SkTypeface.h"
+#endif
+
+namespace content {
+class RendererPpapiHost;
+}
+
+namespace ppapi {
+namespace proxy {
+struct SerializedFontDescription;
+}
+}
+
+class PepperFlashFontFileHost : public ppapi::host::ResourceHost {
+ public:
+  PepperFlashFontFileHost(
+      content::RendererPpapiHost* host,
+      PP_Instance instance,
+      PP_Resource resource,
+      const ppapi::proxy::SerializedFontDescription& description,
+      PP_PrivateFontCharset charset);
+
+  PepperFlashFontFileHost(const PepperFlashFontFileHost&) = delete;
+  PepperFlashFontFileHost& operator=(const PepperFlashFontFileHost&) = delete;
+
+  ~PepperFlashFontFileHost() override;
+
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+
+ private:
+  int32_t OnGetFontTable(ppapi::host::HostMessageContext* context,
+                         uint32_t table);
+  bool GetFontData(uint32_t table, void* buffer, size_t* length);
+
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+  base::File font_file_;
+#elif BUILDFLAG(IS_WIN)
+  sk_sp<SkTypeface> typeface_;
+#endif
+};
+
+#endif  // CHROME_RENDERER_PEPPER_PEPPER_FLASH_FONT_FILE_HOST_H_
diff --git a/content/renderer/pepper/plugin_module.cc b/content/renderer/pepper/plugin_module.cc
index 8279ddcd0ca18..9adf7c31d590c 100644
--- a/content/renderer/pepper/plugin_module.cc
+++ b/content/renderer/pepper/plugin_module.cc
@@ -104,6 +104,7 @@
 #include "ppapi/c/private/ppb_ext_crx_file_system_private.h"
 #include "ppapi/c/private/ppb_file_io_private.h"
 #include "ppapi/c/private/ppb_file_ref_private.h"
+#include "ppapi/c/private/ppb_flash_font_file.h"
 #include "ppapi/c/private/ppb_host_resolver_private.h"
 #include "ppapi/c/private/ppb_instance_private.h"
 #include "ppapi/c/private/ppb_isolated_file_system_private.h"
@@ -292,6 +293,7 @@ const void* InternalGetInterface(const char* name) {
     return ppapi::thunk::Get##iface_struct##_Thunk();
 
 #include "ppapi/thunk/interfaces_ppb_private.h"
+#include "ppapi/thunk/interfaces_ppb_private_flash.h"
 #include "ppapi/thunk/interfaces_ppb_private_no_permissions.h"
 #include "ppapi/thunk/interfaces_ppb_public_dev.h"
 #include "ppapi/thunk/interfaces_ppb_public_dev_channel.h"
diff --git a/content/renderer/pepper/resource_creation_impl.cc b/content/renderer/pepper/resource_creation_impl.cc
index cd26247e65b47..41372a71bb563 100644
--- a/content/renderer/pepper/resource_creation_impl.cc
+++ b/content/renderer/pepper/resource_creation_impl.cc
@@ -81,6 +81,13 @@ PP_Resource ResourceCreationImpl::CreateCameraDevicePrivate(
   return 0;  // Not supported in-process.
 }
 
+PP_Resource ResourceCreationImpl::CreateFlashFontFile(
+    PP_Instance instance,
+    const PP_BrowserFont_Trusted_Description* description,
+    PP_PrivateFontCharset charset) {
+  return 0;  // Not supported in-process.
+}
+
 PP_Resource ResourceCreationImpl::CreateGraphics3D(PP_Instance instance,
                                                    PP_Resource share_context,
                                                    const int32_t* attrib_list) {
diff --git a/content/renderer/pepper/resource_creation_impl.h b/content/renderer/pepper/resource_creation_impl.h
index bca1a43318d6b..73adbe1f6c606 100644
--- a/content/renderer/pepper/resource_creation_impl.h
+++ b/content/renderer/pepper/resource_creation_impl.h
@@ -43,6 +43,10 @@ class ResourceCreationImpl : public ppapi::thunk::ResourceCreationAPI {
   PP_Resource CreateAudioOutput(PP_Instance instance) override;
   PP_Resource CreateBuffer(PP_Instance instance, uint32_t size) override;
   PP_Resource CreateCameraDevicePrivate(PP_Instance instance) override;
+  PP_Resource CreateFlashFontFile(
+      PP_Instance instance,
+      const PP_BrowserFont_Trusted_Description* description,
+      PP_PrivateFontCharset charset) override;
   PP_Resource CreateGraphics3D(PP_Instance instance,
                                PP_Resource share_context,
                                const int32_t* attrib_list) override;
diff --git a/ppapi/PRESUBMIT.py b/ppapi/PRESUBMIT.py
index e5da57fe851b9..e65adcc776b73 100644
--- a/ppapi/PRESUBMIT.py
+++ b/ppapi/PRESUBMIT.py
@@ -177,6 +177,7 @@ def CheckHistogramXml(input_api, output_api):
   files = input_api.change.AffectedFiles()
 
   INTERFACE_FILES = ('ppapi/thunk/interfaces_legacy.h',
+                     'ppapi/thunk/interfaces_ppb_private_flash.h',
                      'ppapi/thunk/interfaces_ppb_private.h',
                      'ppapi/thunk/interfaces_ppb_private_no_permissions.h',
                      'ppapi/thunk/interfaces_ppb_public_dev_channel.h',
diff --git a/ppapi/api/private/ppb_flash_font_file.idl b/ppapi/api/private/ppb_flash_font_file.idl
new file mode 100644
index 0000000000000..b921d1854ca93
--- /dev/null
+++ b/ppapi/api/private/ppb_flash_font_file.idl
@@ -0,0 +1,50 @@
+/* Copyright (c) 2012 The Chromium Authors. All rights reserved.
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+/**
+ * This file contains the <code>PPB_Flash_FontFile</code> interface.
+ */
+
+[generate_thunk]
+
+label Chrome {
+  M24 = 0.1,
+  M48 = 0.2
+};
+
+interface PPB_Flash_FontFile {
+  /* Returns a resource identifying a font file corresponding to the given font
+   * request after applying the browser-specific fallback.
+   */
+  PP_Resource Create(
+      [in] PP_Instance instance,
+      [in] PP_BrowserFont_Trusted_Description description,
+      [in] PP_PrivateFontCharset charset);
+
+  /* Determines if a given resource is Flash font file.
+   */
+  PP_Bool IsFlashFontFile([in] PP_Resource resource);
+
+  /* Returns the requested font table.
+   * |output_length| should pass in the size of |output|. And it will return
+   * the actual length of returned data. |output| could be NULL in order to
+   * query the size of the buffer size needed. In that case, the input value of
+   * |output_length| is ignored.
+   * Note: it is Linux only and fails directly on other platforms.
+   */
+  PP_Bool GetFontTable(
+      [in] PP_Resource font_file,
+      [in] uint32_t table,
+      [out] mem_t output,
+      [out] uint32_t output_length);
+
+  /**
+   * Returns whether <code>PPB_Flash_FontFile</code> is supported on Windows.
+   */
+  [version=0.2]
+  PP_Bool IsSupportedForWindows();
+
+};
+
diff --git a/ppapi/c/BUILD.gn b/ppapi/c/BUILD.gn
index 25d464f284a54..f211cd114077f 100644
--- a/ppapi/c/BUILD.gn
+++ b/ppapi/c/BUILD.gn
@@ -118,6 +118,7 @@ source_set("c") {
     "private/ppb_ext_crx_file_system_private.h",
     "private/ppb_file_io_private.h",
     "private/ppb_file_ref_private.h",
+    "private/ppb_flash_font_file.h",
     "private/ppb_host_resolver_private.h",
     "private/ppb_instance_private.h",
     "private/ppb_isolated_file_system_private.h",
diff --git a/ppapi/c/private/ppb_flash_font_file.h b/ppapi/c/private/ppb_flash_font_file.h
new file mode 100644
index 0000000000000..a1cc7865115e4
--- /dev/null
+++ b/ppapi/c/private/ppb_flash_font_file.h
@@ -0,0 +1,80 @@
+/* Copyright (c) 2012 The Chromium Authors. All rights reserved.
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+/* From private/ppb_flash_font_file.idl modified Fri Oct 23 10:34:57 2015. */
+
+#ifndef PPAPI_C_PRIVATE_PPB_FLASH_FONT_FILE_H_
+#define PPAPI_C_PRIVATE_PPB_FLASH_FONT_FILE_H_
+
+#include "ppapi/c/pp_bool.h"
+#include "ppapi/c/pp_instance.h"
+#include "ppapi/c/pp_macros.h"
+#include "ppapi/c/pp_resource.h"
+#include "ppapi/c/pp_stdint.h"
+#include "ppapi/c/pp_var.h"
+#include "ppapi/c/private/pp_private_font_charset.h"
+#include "ppapi/c/trusted/ppb_browser_font_trusted.h"
+
+#define PPB_FLASH_FONTFILE_INTERFACE_0_1 "PPB_Flash_FontFile;0.1"
+#define PPB_FLASH_FONTFILE_INTERFACE_0_2 "PPB_Flash_FontFile;0.2"
+#define PPB_FLASH_FONTFILE_INTERFACE PPB_FLASH_FONTFILE_INTERFACE_0_2
+
+/**
+ * @file
+ * This file contains the <code>PPB_Flash_FontFile</code> interface.
+ */
+
+
+/**
+ * @addtogroup Interfaces
+ * @{
+ */
+struct PPB_Flash_FontFile_0_2 {
+  /* Returns a resource identifying a font file corresponding to the given font
+   * request after applying the browser-specific fallback.
+   */
+  PP_Resource (*Create)(
+      PP_Instance instance,
+      const struct PP_BrowserFont_Trusted_Description* description,
+      PP_PrivateFontCharset charset);
+  /* Determines if a given resource is Flash font file.
+   */
+  PP_Bool (*IsFlashFontFile)(PP_Resource resource);
+  /* Returns the requested font table.
+   * |output_length| should pass in the size of |output|. And it will return
+   * the actual length of returned data. |output| could be NULL in order to
+   * query the size of the buffer size needed. In that case, the input value of
+   * |output_length| is ignored.
+   * Note: it is Linux only and fails directly on other platforms.
+   */
+  PP_Bool (*GetFontTable)(PP_Resource font_file,
+                          uint32_t table,
+                          void* output,
+                          uint32_t* output_length);
+  /**
+   * Returns whether <code>PPB_Flash_FontFile</code> is supported on Windows.
+   */
+  PP_Bool (*IsSupportedForWindows)(void);
+};
+
+typedef struct PPB_Flash_FontFile_0_2 PPB_Flash_FontFile;
+
+struct PPB_Flash_FontFile_0_1 {
+  PP_Resource (*Create)(
+      PP_Instance instance,
+      const struct PP_BrowserFont_Trusted_Description* description,
+      PP_PrivateFontCharset charset);
+  PP_Bool (*IsFlashFontFile)(PP_Resource resource);
+  PP_Bool (*GetFontTable)(PP_Resource font_file,
+                          uint32_t table,
+                          void* output,
+                          uint32_t* output_length);
+};
+/**
+ * @}
+ */
+
+#endif  /* PPAPI_C_PRIVATE_PPB_FLASH_FONT_FILE_H_ */
+
diff --git a/ppapi/cpp/BUILD.gn b/ppapi/cpp/BUILD.gn
index d3b6bb6e1ab3e..ef559d67c3ed1 100644
--- a/ppapi/cpp/BUILD.gn
+++ b/ppapi/cpp/BUILD.gn
@@ -203,6 +203,8 @@ source_set("objects") {
     "private/ext_crx_file_system_private.h",
     "private/file_io_private.cc",
     "private/file_io_private.h",
+    "private/flash_font_file.cc",
+    "private/flash_font_file.h",
     "private/host_resolver_private.cc",
     "private/host_resolver_private.h",
     "private/instance_private.cc",
diff --git a/ppapi/cpp/private/flash_font_file.cc b/ppapi/cpp/private/flash_font_file.cc
new file mode 100644
index 0000000000000..30a5f666dfb6d
--- /dev/null
+++ b/ppapi/cpp/private/flash_font_file.cc
@@ -0,0 +1,74 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ppapi/cpp/private/flash_font_file.h"
+
+#include "ppapi/c/private/ppb_flash_font_file.h"
+#include "ppapi/c/trusted/ppb_browser_font_trusted.h"
+#include "ppapi/cpp/instance_handle.h"
+#include "ppapi/cpp/module_impl.h"
+
+namespace pp {
+
+namespace {
+
+template <> const char* interface_name<PPB_Flash_FontFile_0_1>() {
+  return PPB_FLASH_FONTFILE_INTERFACE_0_1;
+}
+
+template <> const char* interface_name<PPB_Flash_FontFile_0_2>() {
+  return PPB_FLASH_FONTFILE_INTERFACE_0_2;
+}
+
+}  // namespace
+
+namespace flash {
+
+FontFile::FontFile() {
+}
+
+FontFile::FontFile(const InstanceHandle& instance,
+                   const PP_BrowserFont_Trusted_Description* description,
+                   PP_PrivateFontCharset charset) {
+  if (has_interface<PPB_Flash_FontFile_0_2>()) {
+    PassRefFromConstructor(get_interface<PPB_Flash_FontFile_0_2>()->Create(
+        instance.pp_instance(), description, charset));
+  }
+  else if (has_interface<PPB_Flash_FontFile_0_1>()) {
+    PassRefFromConstructor(get_interface<PPB_Flash_FontFile_0_1>()->Create(
+        instance.pp_instance(), description, charset));
+  }
+}
+
+FontFile::~FontFile() {
+}
+
+// static
+bool FontFile::IsAvailable() {
+  return (has_interface<PPB_Flash_FontFile_0_2>() ||
+          has_interface<PPB_Flash_FontFile_0_1>());
+}
+
+bool FontFile::IsSupportedForWindows() {
+  if (has_interface<PPB_Flash_FontFile_0_2>())
+    return !!get_interface<PPB_Flash_FontFile_0_2>()->IsSupportedForWindows();
+  return false;
+}
+
+bool FontFile::GetFontTable(uint32_t table,
+                            void* output,
+                            uint32_t* output_length) {
+  if (has_interface<PPB_Flash_FontFile_0_2>()) {
+    return !!get_interface<PPB_Flash_FontFile_0_2>()->
+        GetFontTable(pp_resource(), table, output, output_length);
+  }
+  else if (has_interface<PPB_Flash_FontFile_0_1>()) {
+    return !!get_interface<PPB_Flash_FontFile_0_1>()->
+        GetFontTable(pp_resource(), table, output, output_length);
+  }
+  return false;
+}
+
+}  // namespace flash
+}  // namespace pp
diff --git a/ppapi/cpp/private/flash_font_file.h b/ppapi/cpp/private/flash_font_file.h
new file mode 100644
index 0000000000000..0c4aaa686808b
--- /dev/null
+++ b/ppapi/cpp/private/flash_font_file.h
@@ -0,0 +1,42 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef PPAPI_CPP_PRIVATE_FLASH_FONT_FILE_H_
+#define PPAPI_CPP_PRIVATE_FLASH_FONT_FILE_H_
+
+#include <stdint.h>
+
+#include "ppapi/c/private/pp_private_font_charset.h"
+#include "ppapi/cpp/resource.h"
+
+struct PP_BrowserFont_Trusted_Description;
+
+namespace pp {
+
+class InstanceHandle;
+
+namespace flash {
+
+class FontFile : public Resource {
+ public:
+  // Default constructor for making an is_null() FontFile resource.
+  FontFile();
+  FontFile(const InstanceHandle& instance,
+           const PP_BrowserFont_Trusted_Description* description,
+           PP_PrivateFontCharset charset);
+  virtual ~FontFile();
+
+  // Returns true if the required interface is available.
+  static bool IsAvailable();
+
+  // Returns true if this interface is supported for Windows.
+  bool IsSupportedForWindows();
+
+  bool GetFontTable(uint32_t table, void* output, uint32_t* output_length);
+};
+
+}  // namespace flash
+}  // namespace pp
+
+#endif  // PPAPI_CPP_PRIVATE_FLASH_FONT_FILE_H_
diff --git a/ppapi/proxy/BUILD.gn b/ppapi/proxy/BUILD.gn
index c2b7fc3c21f7d..a8e6288567d06 100644
--- a/ppapi/proxy/BUILD.gn
+++ b/ppapi/proxy/BUILD.gn
@@ -187,6 +187,8 @@ component("proxy") {
       "browser_font_singleton_resource.h",
       "device_enumeration_resource_helper.cc",
       "device_enumeration_resource_helper.h",
+      "flash_font_file_resource.cc",
+      "flash_font_file_resource.h",
       "host_dispatcher.cc",
       "host_dispatcher.h",
       "host_var_serialization_rules.cc",
diff --git a/ppapi/proxy/flash_font_file_resource.cc b/ppapi/proxy/flash_font_file_resource.cc
new file mode 100644
index 0000000000000..e16a03f38edc1
--- /dev/null
+++ b/ppapi/proxy/flash_font_file_resource.cc
@@ -0,0 +1,82 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ppapi/proxy/flash_font_file_resource.h"
+
+#include <cstring>
+#include <memory>
+
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/proxy/ppapi_messages.h"
+
+namespace ppapi {
+namespace proxy {
+
+FlashFontFileResource::FlashFontFileResource(
+    Connection connection,
+    PP_Instance instance,
+    const PP_BrowserFont_Trusted_Description* description,
+    PP_PrivateFontCharset charset)
+    : PluginResource(connection, instance),
+      charset_(charset) {
+  description_.SetFromPPBrowserFontDescription(*description);
+}
+
+FlashFontFileResource::~FlashFontFileResource() {
+}
+
+thunk::PPB_Flash_FontFile_API*
+    FlashFontFileResource::AsPPB_Flash_FontFile_API() {
+  return this;
+}
+
+PP_Bool FlashFontFileResource::GetFontTable(uint32_t table,
+                                            void* output,
+                                            uint32_t* output_length) {
+  if (!output_length)
+    return PP_FALSE;
+
+  if (!sent_create_to_renderer()) {
+    SendCreate(
+        RENDERER, PpapiHostMsg_FlashFontFile_Create(description_, charset_));
+  }
+
+  const std::string* contents = GetFontTable(table);
+  if (!contents) {
+    std::string out_contents;
+    int32_t result = SyncCall<PpapiPluginMsg_FlashFontFile_GetFontTableReply>(
+        RENDERER, PpapiHostMsg_FlashFontFile_GetFontTable(table),
+        &out_contents);
+    if (result != PP_OK)
+      return PP_FALSE;
+
+    contents = AddFontTable(table, out_contents);
+  }
+
+  // If we are going to copy the data into |output|, it must be big enough.
+  if (output && *output_length < contents->size())
+    return PP_FALSE;
+
+  *output_length = static_cast<uint32_t>(contents->size());
+  if (output)
+    memcpy(output, contents->c_str(), *output_length);
+  return PP_TRUE;
+}
+
+const std::string* FlashFontFileResource::GetFontTable(uint32_t table) const {
+  auto found = font_tables_.find(table);
+  return (found != font_tables_.end()) ? found->second.get() : nullptr;
+}
+
+const std::string* FlashFontFileResource::AddFontTable(
+    uint32_t table,
+    const std::string& contents) {
+  auto contents_copy = std::make_unique<std::string>(contents);
+  std::string* contents_copy_ptr = contents_copy.get();
+  font_tables_[table] = std::move(contents_copy);
+  return contents_copy_ptr;
+}
+
+}  // namespace proxy
+}  // namespace ppapi
diff --git a/ppapi/proxy/flash_font_file_resource.h b/ppapi/proxy/flash_font_file_resource.h
new file mode 100644
index 0000000000000..8fe12a01f27a7
--- /dev/null
+++ b/ppapi/proxy/flash_font_file_resource.h
@@ -0,0 +1,63 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef PPAPI_PROXY_FLASH_FONT_FILE_RESOURCE_H_
+#define PPAPI_PROXY_FLASH_FONT_FILE_RESOURCE_H_
+
+#include <stdint.h>
+
+#include <string>
+#include <unordered_map>
+
+#include "ppapi/c/private/pp_private_font_charset.h"
+#include "ppapi/proxy/plugin_resource.h"
+#include "ppapi/proxy/serialized_structs.h"
+#include "ppapi/thunk/ppb_flash_font_file_api.h"
+
+struct PP_BrowserFont_Trusted_Description;
+
+namespace ppapi {
+namespace proxy {
+
+// TODO(yzshen): write unittest and browser test.
+class FlashFontFileResource : public PluginResource,
+                              public thunk::PPB_Flash_FontFile_API {
+ public:
+  FlashFontFileResource(Connection connection,
+                        PP_Instance instance,
+                        const PP_BrowserFont_Trusted_Description* description,
+                        PP_PrivateFontCharset charset);
+
+  FlashFontFileResource(const FlashFontFileResource&) = delete;
+  FlashFontFileResource& operator=(const FlashFontFileResource&) = delete;
+
+  ~FlashFontFileResource() override;
+
+  // Resource overrides.
+  thunk::PPB_Flash_FontFile_API* AsPPB_Flash_FontFile_API() override;
+
+  // PPB_Flash_FontFile_API.
+  PP_Bool GetFontTable(uint32_t table,
+                       void* output,
+                       uint32_t* output_length) override;
+
+ private:
+  // Sees if we have a cache of the font table and returns a pointer to it.
+  // Returns NULL if we don't have it.
+  const std::string* GetFontTable(uint32_t table) const;
+
+  const std::string* AddFontTable(uint32_t table, const std::string& contents);
+
+  using FontTableMap =
+      std::unordered_map<uint32_t, std::unique_ptr<std::string>>;
+  FontTableMap font_tables_;
+
+  SerializedFontDescription description_;
+  const PP_PrivateFontCharset charset_;
+};
+
+}  // namespace proxy
+}  // namespace ppapi
+
+#endif  // PPAPI_PROXY_FLASH_FONT_FILE_RESOURCE_H_
diff --git a/ppapi/proxy/interface_list.cc b/ppapi/proxy/interface_list.cc
index 5328628f924f8..1a6d6a0c660c3 100644
--- a/ppapi/proxy/interface_list.cc
+++ b/ppapi/proxy/interface_list.cc
@@ -76,6 +76,7 @@
 #include "ppapi/c/private/ppb_ext_crx_file_system_private.h"
 #include "ppapi/c/private/ppb_file_io_private.h"
 #include "ppapi/c/private/ppb_file_ref_private.h"
+#include "ppapi/c/private/ppb_flash_font_file.h"
 #include "ppapi/c/private/ppb_host_resolver_private.h"
 #include "ppapi/c/private/ppb_isolated_file_system_private.h"
 #include "ppapi/c/private/ppb_net_address_private.h"
@@ -178,6 +179,10 @@ InterfaceList::InterfaceList() {
     Permission current_required_permission = PERMISSION_PRIVATE;
     #include "ppapi/thunk/interfaces_ppb_private.h"
   }
+  {
+    Permission current_required_permission = PERMISSION_FLASH;
+    #include "ppapi/thunk/interfaces_ppb_private_flash.h"
+  }
 #endif  // !BUILDFLAG(IS_NACL)
   {
     Permission current_required_permission = PERMISSION_DEV_CHANNEL;
diff --git a/ppapi/proxy/ppapi_messages.h b/ppapi/proxy/ppapi_messages.h
index d1290a26305c2..2241a7bae631e 100644
--- a/ppapi/proxy/ppapi_messages.h
+++ b/ppapi/proxy/ppapi_messages.h
@@ -1789,6 +1789,15 @@ IPC_MESSAGE_CONTROL2(PpapiPluginMsg_DeviceEnumeration_NotifyDeviceChange,
                      uint32_t /* callback_id */,
                      std::vector<ppapi::DeviceRefData> /* devices */)
 
+// Flash font file.
+IPC_MESSAGE_CONTROL2(PpapiHostMsg_FlashFontFile_Create,
+                     ppapi::proxy::SerializedFontDescription /* description */,
+                     PP_PrivateFontCharset /* charset */)
+IPC_MESSAGE_CONTROL1(PpapiHostMsg_FlashFontFile_GetFontTable,
+                     uint32_t /* table */)
+IPC_MESSAGE_CONTROL1(PpapiPluginMsg_FlashFontFile_GetFontTableReply,
+                     std::string /* output */)
+
 // VideoCapture ----------------------------------------------------------------
 
 // VideoCapture_Dev, plugin -> host
diff --git a/ppapi/proxy/resource_creation_proxy.cc b/ppapi/proxy/resource_creation_proxy.cc
index 5cc1aafc9cadd..380fad4c55915 100644
--- a/ppapi/proxy/resource_creation_proxy.cc
+++ b/ppapi/proxy/resource_creation_proxy.cc
@@ -15,6 +15,7 @@
 #include "ppapi/proxy/file_io_resource.h"
 #include "ppapi/proxy/file_ref_resource.h"
 #include "ppapi/proxy/file_system_resource.h"
+#include "ppapi/proxy/flash_font_file_resource.h"
 #include "ppapi/proxy/graphics_2d_resource.h"
 #include "ppapi/proxy/host_resolver_private_resource.h"
 #include "ppapi/proxy/host_resolver_resource.h"
@@ -404,6 +405,14 @@ PP_Resource ResourceCreationProxy::CreateBuffer(PP_Instance instance,
   return PPB_Buffer_Proxy::CreateProxyResource(instance, size);
 }
 
+PP_Resource ResourceCreationProxy::CreateFlashFontFile(
+    PP_Instance instance,
+    const PP_BrowserFont_Trusted_Description* description,
+    PP_PrivateFontCharset charset) {
+  return (new FlashFontFileResource(
+      GetConnection(), instance, description, charset))->GetReference();
+}
+
 PP_Resource ResourceCreationProxy::CreateVideoCapture(PP_Instance instance) {
   PluginDispatcher* dispatcher = PluginDispatcher::GetForInstance(instance);
   if (!dispatcher)
diff --git a/ppapi/proxy/resource_creation_proxy.h b/ppapi/proxy/resource_creation_proxy.h
index 36da978d852ed..f98bc14f67574 100644
--- a/ppapi/proxy/resource_creation_proxy.h
+++ b/ppapi/proxy/resource_creation_proxy.h
@@ -161,6 +161,10 @@ class ResourceCreationProxy : public InterfaceProxy,
       PP_Instance instance,
       const PP_BrowserFont_Trusted_Description* description) override;
   PP_Resource CreateBuffer(PP_Instance instance, uint32_t size) override;
+  PP_Resource CreateFlashFontFile(
+      PP_Instance instance,
+      const PP_BrowserFont_Trusted_Description* description,
+      PP_PrivateFontCharset charset) override;
   PP_Resource CreateVideoCapture(PP_Instance instance) override;
   PP_Resource CreateVideoDecoderDev(
       PP_Instance instance,
diff --git a/ppapi/shared_impl/BUILD.gn b/ppapi/shared_impl/BUILD.gn
index c496f4f819afb..301d1e6cdc755 100644
--- a/ppapi/shared_impl/BUILD.gn
+++ b/ppapi/shared_impl/BUILD.gn
@@ -61,6 +61,7 @@ source_set("common") {
     "ppb_audio_config_shared.h",
     "ppb_device_ref_shared.cc",
     "ppb_device_ref_shared.h",
+    "ppb_flash_font_file_shared.h",
     "ppb_image_data_shared.cc",
     "ppb_image_data_shared.h",
     "ppb_message_loop_shared.cc",
diff --git a/ppapi/shared_impl/ppb_flash_font_file_shared.h b/ppapi/shared_impl/ppb_flash_font_file_shared.h
new file mode 100644
index 0000000000000..85ec991c7bf48
--- /dev/null
+++ b/ppapi/shared_impl/ppb_flash_font_file_shared.h
@@ -0,0 +1,19 @@
+// Copyright 2016 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef PPAPI_SHARED_IMPL_PPB_FLASH_FONT_FILE_SHARED_H_
+#define PPAPI_SHARED_IMPL_PPB_FLASH_FONT_FILE_SHARED_H_
+
+#include "ppapi/c/pp_bool.h"
+
+namespace ppapi {
+
+class PPB_Flash_FontFile_Shared {
+ public:
+  static PP_Bool IsSupportedForWindows() { return PP_TRUE; }
+};
+
+}  // namespace ppapi
+
+#endif   // PPAPI_SHARED_IMPL_PPB_FLASH_FONT_FILE_SHARED_H_
\ No newline at end of file
diff --git a/ppapi/shared_impl/resource.h b/ppapi/shared_impl/resource.h
index 6fb6b70a49325..80caef47be948 100644
--- a/ppapi/shared_impl/resource.h
+++ b/ppapi/shared_impl/resource.h
@@ -36,6 +36,7 @@
   F(PPB_FileRef_API)                    \
   F(PPB_FileSystem_API)                 \
   F(PPB_Find_API)                       \
+  F(PPB_Flash_FontFile_API)             \
   F(PPB_Flash_Fullscreen_API)           \
   F(PPB_Gamepad_API)                    \
   F(PPB_Graphics2D_API)                 \
diff --git a/ppapi/tests/all_c_includes.h b/ppapi/tests/all_c_includes.h
index 98b6acfeee310..6f9ed9d3902fd 100644
--- a/ppapi/tests/all_c_includes.h
+++ b/ppapi/tests/all_c_includes.h
@@ -99,6 +99,7 @@
 #include "ppapi/c/private/ppb_display_color_profile_private.h"
 #include "ppapi/c/private/ppb_ext_crx_file_system_private.h"
 #include "ppapi/c/private/ppb_file_io_private.h"
+#include "ppapi/c/private/ppb_flash_font_file.h"
 #include "ppapi/c/private/ppb_host_resolver_private.h"
 #include "ppapi/c/private/ppb_instance_private.h"
 #include "ppapi/c/private/ppb_net_address_private.h"
diff --git a/ppapi/tests/all_cpp_includes.h b/ppapi/tests/all_cpp_includes.h
index ed29cd5183b4c..9f6364d72566a 100644
--- a/ppapi/tests/all_cpp_includes.h
+++ b/ppapi/tests/all_cpp_includes.h
@@ -46,6 +46,7 @@
 #include "ppapi/cpp/point.h"
 #include "ppapi/cpp/private/camera_capabilities_private.h"
 #include "ppapi/cpp/private/camera_device_private.h"
+#include "ppapi/cpp/private/flash_font_file.h"
 #include "ppapi/cpp/private/instance_private.h"
 #include "ppapi/cpp/private/net_address_private.h"
 #include "ppapi/cpp/private/tcp_socket_private.h"
diff --git a/ppapi/thunk/BUILD.gn b/ppapi/thunk/BUILD.gn
index cd481ad7d0a95..f2a70e53a2415 100644
--- a/ppapi/thunk/BUILD.gn
+++ b/ppapi/thunk/BUILD.gn
@@ -11,6 +11,7 @@ source_set("headers") {
     "enter.h",
     "interfaces_postamble.h",
     "interfaces_ppb_private.h",
+    "interfaces_ppb_private_flash.h",
     "interfaces_ppb_private_no_permissions.h",
     "interfaces_ppb_public_dev.h",
     "interfaces_ppb_public_dev_channel.h",
@@ -70,6 +71,7 @@ source_set("thunk") {
     "ppb_file_ref_thunk.cc",
     "ppb_file_system_api.h",
     "ppb_file_system_thunk.cc",
+    "ppb_flash_font_file_api.h",
     "ppb_fullscreen_thunk.cc",
     "ppb_gamepad_api.h",
     "ppb_gamepad_thunk.cc",
@@ -152,6 +154,7 @@ source_set("thunk") {
       "ppb_browser_font_trusted_thunk.cc",
       "ppb_buffer_thunk.cc",
       "ppb_char_set_thunk.cc",
+      "ppb_flash_font_file_thunk.cc",
       "ppb_gles_chromium_texture_mapping_thunk.cc",
       "ppb_url_util_thunk.cc",
       "ppb_video_capture_thunk.cc",
diff --git a/ppapi/thunk/interfaces_ppb_private_flash.h b/ppapi/thunk/interfaces_ppb_private_flash.h
new file mode 100644
index 0000000000000..20ead8e524976
--- /dev/null
+++ b/ppapi/thunk/interfaces_ppb_private_flash.h
@@ -0,0 +1,17 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// Please see inteface_ppb_public_stable for the documentation on the format of
+// this file.
+
+// no-include-guard-because-multiply-included
+
+#include "ppapi/thunk/interfaces_preamble.h"
+
+PROXIED_IFACE(PPB_FLASH_FONTFILE_INTERFACE_0_1,
+              PPB_Flash_FontFile_0_1)
+PROXIED_IFACE(PPB_FLASH_FONTFILE_INTERFACE_0_2,
+              PPB_Flash_FontFile_0_2)
+
+#include "ppapi/thunk/interfaces_postamble.h"
diff --git a/ppapi/thunk/ppb_flash_font_file_api.h b/ppapi/thunk/ppb_flash_font_file_api.h
new file mode 100644
index 0000000000000..9e8ce236bbf89
--- /dev/null
+++ b/ppapi/thunk/ppb_flash_font_file_api.h
@@ -0,0 +1,26 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef PPAPI_THUNK_PPB_FLASH_FONT_FILE_API_H_
+#define PPAPI_THUNK_PPB_FLASH_FONT_FILE_API_H_
+
+#include "ppapi/c/pp_stdint.h"
+
+namespace ppapi {
+namespace thunk {
+
+class PPB_Flash_FontFile_API {
+ public:
+  virtual ~PPB_Flash_FontFile_API() {}
+
+  virtual PP_Bool GetFontTable(uint32_t table,
+                               void* output,
+                               uint32_t* output_length) = 0;
+};
+
+}  // namespace thunk
+}  // namespace ppapi
+
+#endif  // PPAPI_THUNK_PPB_FLASH_FONT_FILE_API_H_
+
diff --git a/ppapi/thunk/ppb_flash_font_file_thunk.cc b/ppapi/thunk/ppb_flash_font_file_thunk.cc
new file mode 100644
index 0000000000000..37a85fe6d89b2
--- /dev/null
+++ b/ppapi/thunk/ppb_flash_font_file_thunk.cc
@@ -0,0 +1,74 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+// From private/ppb_flash_font_file.idl modified Wed Mar  9 12:48:51 2016.
+
+#include <stdint.h>
+
+#include "base/logging.h"
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/c/private/ppb_flash_font_file.h"
+#include "ppapi/shared_impl/ppb_flash_font_file_shared.h"
+#include "ppapi/shared_impl/tracked_callback.h"
+#include "ppapi/thunk/enter.h"
+#include "ppapi/thunk/ppapi_thunk_export.h"
+#include "ppapi/thunk/ppb_flash_font_file_api.h"
+
+namespace ppapi {
+namespace thunk {
+
+namespace {
+
+PP_Resource Create(PP_Instance instance,
+                   const struct PP_BrowserFont_Trusted_Description* description,
+                   PP_PrivateFontCharset charset) {
+  VLOG(4) << "PPB_Flash_FontFile::Create()";
+  EnterResourceCreation enter(instance);
+  if (enter.failed())
+    return 0;
+  return enter.functions()->CreateFlashFontFile(instance, description, charset);
+}
+
+PP_Bool IsFlashFontFile(PP_Resource resource) {
+  VLOG(4) << "PPB_Flash_FontFile::IsFlashFontFile()";
+  EnterResource<PPB_Flash_FontFile_API> enter(resource, false);
+  return PP_FromBool(enter.succeeded());
+}
+
+PP_Bool GetFontTable(PP_Resource font_file,
+                     uint32_t table,
+                     void* output,
+                     uint32_t* output_length) {
+  VLOG(4) << "PPB_Flash_FontFile::GetFontTable()";
+  EnterResource<PPB_Flash_FontFile_API> enter(font_file, true);
+  if (enter.failed())
+    return PP_FALSE;
+  return enter.object()->GetFontTable(table, output, output_length);
+}
+
+PP_Bool IsSupportedForWindows(void) {
+  VLOG(4) << "PPB_Flash_FontFile::IsSupportedForWindows()";
+  return PPB_Flash_FontFile_Shared::IsSupportedForWindows();
+}
+
+const PPB_Flash_FontFile_0_1 g_ppb_flash_fontfile_thunk_0_1 = {
+    &Create, &IsFlashFontFile, &GetFontTable};
+
+const PPB_Flash_FontFile_0_2 g_ppb_flash_fontfile_thunk_0_2 = {
+    &Create, &IsFlashFontFile, &GetFontTable, &IsSupportedForWindows};
+
+}  // namespace
+
+PPAPI_THUNK_EXPORT const PPB_Flash_FontFile_0_1*
+GetPPB_Flash_FontFile_0_1_Thunk() {
+  return &g_ppb_flash_fontfile_thunk_0_1;
+}
+
+PPAPI_THUNK_EXPORT const PPB_Flash_FontFile_0_2*
+GetPPB_Flash_FontFile_0_2_Thunk() {
+  return &g_ppb_flash_fontfile_thunk_0_2;
+}
+
+}  // namespace thunk
+}  // namespace ppapi
diff --git a/ppapi/thunk/resource_creation_api.h b/ppapi/thunk/resource_creation_api.h
index 098432b2e7ebf..c20ed8f1fa2a0 100644
--- a/ppapi/thunk/resource_creation_api.h
+++ b/ppapi/thunk/resource_creation_api.h
@@ -182,6 +182,10 @@ class ResourceCreationAPI {
       PP_Instance instance,
       const PP_BrowserFont_Trusted_Description* description) = 0;
   virtual PP_Resource CreateBuffer(PP_Instance instance, uint32_t size) = 0;
+  virtual PP_Resource CreateFlashFontFile(
+      PP_Instance instance,
+      const PP_BrowserFont_Trusted_Description* description,
+      PP_PrivateFontCharset charset) = 0;
   virtual PP_Resource CreateVideoCapture(PP_Instance instance) = 0;
   virtual PP_Resource CreateVideoDecoderDev(
       PP_Instance instance,
diff --git a/ppapi/thunk/thunk.h b/ppapi/thunk/thunk.h
index 880907020c6b2..f01f0e4857944 100644
--- a/ppapi/thunk/thunk.h
+++ b/ppapi/thunk/thunk.h
@@ -19,6 +19,7 @@
   } }
 
 #include "ppapi/thunk/interfaces_ppb_private.h"
+#include "ppapi/thunk/interfaces_ppb_private_flash.h"
 #include "ppapi/thunk/interfaces_ppb_private_no_permissions.h"
 #include "ppapi/thunk/interfaces_ppb_public_dev.h"
 #include "ppapi/thunk/interfaces_ppb_public_dev_channel.h"

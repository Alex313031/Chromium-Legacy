diff --git a/chrome/renderer/BUILD.gn b/chrome/renderer/BUILD.gn
index 50174b5061a47..93f57d5fd1f4a 100644
--- a/chrome/renderer/BUILD.gn
+++ b/chrome/renderer/BUILD.gn
@@ -223,6 +223,8 @@ static_library("renderer") {
       "pepper/chrome_renderer_pepper_host_factory.h",
       "pepper/pepper_flash_font_file_host.cc",
       "pepper/pepper_flash_font_file_host.h",
+      "pepper/pepper_flash_fullscreen_host.cc",
+      "pepper/pepper_flash_fullscreen_host.h",
       "pepper/pepper_helper.cc",
       "pepper/pepper_helper.h",
       "pepper/pepper_shared_memory_message_filter.cc",
diff --git a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
index 4b84f4ef068a7..60cfd89dfd18e 100644
--- a/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
+++ b/chrome/renderer/pepper/chrome_renderer_pepper_host_factory.cc
@@ -6,6 +6,7 @@
 
 #include "base/check_op.h"
 #include "chrome/renderer/pepper/pepper_flash_font_file_host.h"
+#include "chrome/renderer/pepper/pepper_flash_fullscreen_host.h"
 #include "chrome/renderer/pepper/pepper_uma_host.h"
 #include "components/pdf/renderer/pepper_pdf_host.h"
 #include "content/public/renderer/renderer_ppapi_host.h"
@@ -36,10 +37,22 @@ ChromeRendererPepperHostFactory::CreateResourceHost(
   if (!host_->IsValidInstance(instance))
     return nullptr;
 
+  if (host_->GetPpapiHost()->permissions().HasPermission(
+          ppapi::PERMISSION_FLASH)) {
+    switch (message.type()) {
+      case PpapiHostMsg_FlashFullscreen_Create::ID: {
+        return std::make_unique<PepperFlashFullscreenHost>(host_, instance,
+                                                           resource);
+      }
+    }
+  }
+
   // TODO(raymes): PDF also needs access to the FlashFontFileHost currently.
   // We should either rename PPB_FlashFont_File to PPB_FontFile_Private or get
   // rid of its use in PDF if possible.
   if (host_->GetPpapiHost()->permissions().HasPermission(
+          ppapi::PERMISSION_FLASH) ||
+      host_->GetPpapiHost()->permissions().HasPermission(
           ppapi::PERMISSION_PDF)) {
     switch (message.type()) {
       case PpapiHostMsg_FlashFontFile_Create::ID: {
diff --git a/chrome/renderer/pepper/pepper_flash_fullscreen_host.cc b/chrome/renderer/pepper/pepper_flash_fullscreen_host.cc
new file mode 100644
index 0000000000000..fe9f2bec0c57c
--- /dev/null
+++ b/chrome/renderer/pepper/pepper_flash_fullscreen_host.cc
@@ -0,0 +1,27 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/renderer/pepper/pepper_flash_fullscreen_host.h"
+
+#include "content/public/renderer/pepper_plugin_instance.h"
+#include "content/public/renderer/renderer_ppapi_host.h"
+#include "ppapi/c/pp_errors.h"
+#include "ppapi/host/dispatch_host_message.h"
+#include "ppapi/host/host_message_context.h"
+#include "ppapi/host/ppapi_host.h"
+#include "ppapi/proxy/ppapi_messages.h"
+
+PepperFlashFullscreenHost::PepperFlashFullscreenHost(
+    content::RendererPpapiHost* host,
+    PP_Instance instance,
+    PP_Resource resource)
+    : ResourceHost(host->GetPpapiHost(), instance, resource) {}
+
+PepperFlashFullscreenHost::~PepperFlashFullscreenHost() {}
+
+int32_t PepperFlashFullscreenHost::OnResourceMessageReceived(
+    const IPC::Message& msg,
+    ppapi::host::HostMessageContext* context) {
+  return PP_ERROR_FAILED;
+}
diff --git a/chrome/renderer/pepper/pepper_flash_fullscreen_host.h b/chrome/renderer/pepper/pepper_flash_fullscreen_host.h
new file mode 100644
index 0000000000000..18b5fa89f32d1
--- /dev/null
+++ b/chrome/renderer/pepper/pepper_flash_fullscreen_host.h
@@ -0,0 +1,33 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_RENDERER_PEPPER_PEPPER_FLASH_FULLSCREEN_HOST_H_
+#define CHROME_RENDERER_PEPPER_PEPPER_FLASH_FULLSCREEN_HOST_H_
+
+#include <stdint.h>
+
+#include "ppapi/host/resource_host.h"
+
+namespace content {
+class RendererPpapiHost;
+}
+
+class PepperFlashFullscreenHost : public ppapi::host::ResourceHost {
+ public:
+  PepperFlashFullscreenHost(content::RendererPpapiHost* host,
+                            PP_Instance instance,
+                            PP_Resource resource);
+
+  PepperFlashFullscreenHost(const PepperFlashFullscreenHost&) = delete;
+  PepperFlashFullscreenHost& operator=(const PepperFlashFullscreenHost&) =
+      delete;
+
+  ~PepperFlashFullscreenHost() override;
+
+  int32_t OnResourceMessageReceived(
+      const IPC::Message& msg,
+      ppapi::host::HostMessageContext* context) override;
+};
+
+#endif  // CHROME_RENDERER_PEPPER_PEPPER_FLASH_FULLSCREEN_HOST_H_
diff --git a/content/renderer/pepper/pepper_url_loader_host.cc b/content/renderer/pepper/pepper_url_loader_host.cc
index 10fb0c9911140..fcbe57af419f3 100644
--- a/content/renderer/pepper/pepper_url_loader_host.cc
+++ b/content/renderer/pepper/pepper_url_loader_host.cc
@@ -329,7 +329,8 @@ int32_t PepperURLLoaderHost::OnHostMsgClose(
 int32_t PepperURLLoaderHost::OnHostMsgGrantUniversalAccess(
     ppapi::host::HostMessageContext* context) {
   // Only plugins with permission can bypass same origin.
-  if (host()->permissions().HasPermission(ppapi::PERMISSION_PDF)) {
+  if (host()->permissions().HasPermission(ppapi::PERMISSION_PDF) ||
+      host()->permissions().HasPermission(ppapi::PERMISSION_FLASH)) {
     has_universal_access_ = true;
     return PP_OK;
   }
diff --git a/ppapi/proxy/BUILD.gn b/ppapi/proxy/BUILD.gn
index 62ca8ca3f1c2f..13e2afebda329 100644
--- a/ppapi/proxy/BUILD.gn
+++ b/ppapi/proxy/BUILD.gn
@@ -193,6 +193,8 @@ component("proxy") {
       "device_enumeration_resource_helper.h",
       "flash_font_file_resource.cc",
       "flash_font_file_resource.h",
+      "flash_fullscreen_resource.cc",
+      "flash_fullscreen_resource.h",
       "host_dispatcher.cc",
       "host_dispatcher.h",
       "host_var_serialization_rules.cc",
diff --git a/ppapi/proxy/flash_fullscreen_resource.cc b/ppapi/proxy/flash_fullscreen_resource.cc
new file mode 100644
index 0000000000000..feab2774a6234
--- /dev/null
+++ b/ppapi/proxy/flash_fullscreen_resource.cc
@@ -0,0 +1,48 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ppapi/proxy/flash_fullscreen_resource.h"
+
+#include <stdint.h>
+
+#include "ppapi/c/pp_bool.h"
+#include "ppapi/proxy/ppapi_messages.h"
+
+namespace ppapi {
+namespace proxy {
+
+FlashFullscreenResource::FlashFullscreenResource(Connection connection,
+                                                 PP_Instance instance)
+    : PluginResource(connection, instance),
+      is_fullscreen_(PP_FALSE) {
+}
+
+FlashFullscreenResource::~FlashFullscreenResource() {
+}
+
+thunk::PPB_Flash_Fullscreen_API*
+FlashFullscreenResource::AsPPB_Flash_Fullscreen_API() {
+  return this;
+}
+
+PP_Bool FlashFullscreenResource::IsFullscreen(PP_Instance instance) {
+  return is_fullscreen_;
+}
+
+PP_Bool FlashFullscreenResource::SetFullscreen(PP_Instance instance,
+                                               PP_Bool fullscreen) {
+  if (!sent_create_to_renderer())
+    SendCreate(RENDERER, PpapiHostMsg_FlashFullscreen_Create());
+  int32_t result = SyncCall<IPC::Message>(RENDERER,
+      PpapiHostMsg_FlashFullscreen_SetFullscreen(PP_ToBool(fullscreen)));
+  return PP_FromBool(result == PP_OK);
+}
+
+void FlashFullscreenResource::SetLocalIsFullscreen(PP_Instance instance,
+                                                   PP_Bool is_fullscreen) {
+  is_fullscreen_ = is_fullscreen;
+}
+
+}  // namespace proxy
+}  // namespace ppapi
diff --git a/ppapi/proxy/flash_fullscreen_resource.h b/ppapi/proxy/flash_fullscreen_resource.h
new file mode 100644
index 0000000000000..5978ac2fd337d
--- /dev/null
+++ b/ppapi/proxy/flash_fullscreen_resource.h
@@ -0,0 +1,43 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef PPAPI_PROXY_FLASH_FULLSCREEN_RESOURCE_H_
+#define PPAPI_PROXY_FLASH_FULLSCREEN_RESOURCE_H_
+
+#include "ppapi/proxy/connection.h"
+#include "ppapi/proxy/plugin_resource.h"
+#include "ppapi/thunk/ppb_flash_fullscreen_api.h"
+
+namespace ppapi {
+namespace proxy {
+
+class FlashFullscreenResource
+    : public PluginResource,
+      public thunk::PPB_Flash_Fullscreen_API {
+ public:
+  FlashFullscreenResource(Connection connection,
+                          PP_Instance instance);
+
+  FlashFullscreenResource(const FlashFullscreenResource&) = delete;
+  FlashFullscreenResource& operator=(const FlashFullscreenResource&) = delete;
+
+  ~FlashFullscreenResource() override;
+
+  // Resource overrides.
+  thunk::PPB_Flash_Fullscreen_API* AsPPB_Flash_Fullscreen_API() override;
+
+  // PPB_Flash_Fullscreen_API implementation.
+  PP_Bool IsFullscreen(PP_Instance instance) override;
+  PP_Bool SetFullscreen(PP_Instance instance, PP_Bool fullscreen) override;
+  void SetLocalIsFullscreen(PP_Instance instance,
+                            PP_Bool is_fullscreen) override;
+
+ private:
+  PP_Bool is_fullscreen_;
+};
+
+}  // namespace proxy
+}  // namespace ppapi
+
+#endif  // PPAPI_PROXY_FLASH_FULLSCREEN_RESOURCE_H_
diff --git a/ppapi/proxy/ppapi_messages.h b/ppapi/proxy/ppapi_messages.h
index 188227e8d5029..e9e2c477f0da8 100644
--- a/ppapi/proxy/ppapi_messages.h
+++ b/ppapi/proxy/ppapi_messages.h
@@ -2051,6 +2051,11 @@ IPC_MESSAGE_CONTROL1(PpapiHostMsg_FlashFontFile_GetFontTable,
 IPC_MESSAGE_CONTROL1(PpapiPluginMsg_FlashFontFile_GetFontTableReply,
                      std::string /* output */)
 
+// Flash fullscreen.
+IPC_MESSAGE_CONTROL0(PpapiHostMsg_FlashFullscreen_Create)
+IPC_MESSAGE_CONTROL1(PpapiHostMsg_FlashFullscreen_SetFullscreen,
+                     bool /* fullscreen */)
+
 // PDF ------------------------------------------------------------------------
 
 // Creates the PDF resource.
diff --git a/ppapi/proxy/ppb_instance_proxy.cc b/ppapi/proxy/ppb_instance_proxy.cc
index bbd10a244a62f..dae79cd3fe81f 100644
--- a/ppapi/proxy/ppb_instance_proxy.cc
+++ b/ppapi/proxy/ppb_instance_proxy.cc
@@ -20,6 +20,7 @@
 #include "ppapi/c/ppb_mouse_lock.h"
 #include "ppapi/proxy/browser_font_singleton_resource.h"
 #include "ppapi/proxy/enter_proxy.h"
+#include "ppapi/proxy/flash_fullscreen_resource.h"
 #include "ppapi/proxy/gamepad_resource.h"
 #include "ppapi/proxy/host_dispatcher.h"
 #include "ppapi/proxy/isolated_file_system_private_resource.h"
@@ -356,19 +357,20 @@ Resource* PPB_Instance_Proxy::GetSingletonResource(PP_Instance instance,
     case UMA_SINGLETON_ID:
       new_singleton = new UMAPrivateResource(connection, instance);
       break;
-    case FLASH_FULLSCREEN_SINGLETON_ID:
-      NOTREACHED();
-      break;
 // Flash/trusted resources aren't needed for NaCl.
 #if !BUILDFLAG(IS_NACL)
     case BROWSER_FONT_SINGLETON_ID:
       new_singleton = new BrowserFontSingletonResource(connection, instance);
       break;
+    case FLASH_FULLSCREEN_SINGLETON_ID:
+      new_singleton = new FlashFullscreenResource(connection, instance);
+      break;
     case PDF_SINGLETON_ID:
       new_singleton = new PDFResource(connection, instance);
       break;
 #else
     case BROWSER_FONT_SINGLETON_ID:
+    case FLASH_FULLSCREEN_SINGLETON_ID:
     case PDF_SINGLETON_ID:
       NOTREACHED();
 #endif  // !BUILDFLAG(IS_NACL)
diff --git a/ppapi/proxy/ppp_instance_proxy.cc b/ppapi/proxy/ppp_instance_proxy.cc
index de545865a4fb9..0e63fc116bee0 100644
--- a/ppapi/proxy/ppp_instance_proxy.cc
+++ b/ppapi/proxy/ppp_instance_proxy.cc
@@ -27,6 +27,7 @@
 #include "ppapi/shared_impl/resource_tracker.h"
 #include "ppapi/shared_impl/scoped_pp_resource.h"
 #include "ppapi/thunk/enter.h"
+#include "ppapi/thunk/ppb_flash_fullscreen_api.h"
 #include "ppapi/thunk/ppb_view_api.h"
 
 namespace ppapi {
@@ -199,7 +201,7 @@ void PPP_Instance_Proxy::OnPluginMsgDidDestroy(PP_Instance instance) {
 void PPP_Instance_Proxy::OnPluginMsgDidChangeView(
     PP_Instance instance,
     const ViewData& new_data,
-    PP_Bool /*flash_fullscreen*/) {
+    PP_Bool flash_fullscreen) {
   PluginDispatcher* dispatcher = PluginDispatcher::GetForInstance(instance);
   if (!dispatcher)
     return;
@@ -208,6 +210,12 @@ void PPP_Instance_Proxy::OnPluginMsgDidChangeView(
     return;
   data->view = new_data;
 
+#if !BUILDFLAG(IS_NACL)
+  EnterInstanceAPINoLock<PPB_Flash_Fullscreen_API> enter(instance);
+  if (!enter.failed())
+    enter.functions()->SetLocalIsFullscreen(instance, flash_fullscreen);
+#endif  // !BUILDFLAG(IS_NACL)
+
   ScopedPPResource resource(
       ScopedPPResource::PassRef(),
       (new PPB_View_Shared(OBJECT_IS_PROXY,
diff --git a/ppapi/thunk/BUILD.gn b/ppapi/thunk/BUILD.gn
index e1f14c2d1e683..cd0d1da5e22d3 100644
--- a/ppapi/thunk/BUILD.gn
+++ b/ppapi/thunk/BUILD.gn
@@ -73,6 +73,7 @@ source_set("thunk") {
     "ppb_file_system_thunk.cc",
     "ppb_find_private_thunk.cc",
     "ppb_flash_font_file_api.h",
+    "ppb_flash_fullscreen_api.h",
     "ppb_fullscreen_thunk.cc",
     "ppb_gamepad_api.h",
     "ppb_gamepad_thunk.cc",
diff --git a/ppapi/thunk/ppb_flash_fullscreen_api.h b/ppapi/thunk/ppb_flash_fullscreen_api.h
new file mode 100644
index 0000000000000..d1435b55f8658
--- /dev/null
+++ b/ppapi/thunk/ppb_flash_fullscreen_api.h
@@ -0,0 +1,35 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef PPAPI_THUNK_PPB_FLASH_FULLSCREEN_API_H_
+#define PPAPI_THUNK_PPB_FLASH_FULLSCREEN_API_H_
+
+#include "ppapi/shared_impl/singleton_resource_id.h"
+#include "ppapi/thunk/ppapi_thunk_export.h"
+
+namespace ppapi {
+namespace thunk {
+
+class PPAPI_THUNK_EXPORT PPB_Flash_Fullscreen_API {
+ public:
+  virtual ~PPB_Flash_Fullscreen_API() {}
+
+  virtual PP_Bool IsFullscreen(PP_Instance instance) = 0;
+  virtual PP_Bool SetFullscreen(PP_Instance instance,
+                                PP_Bool fullscreen) = 0;
+
+  // Internal function used to update whether or not Flash fullscreen is enabled
+  // in the plugin side. The value is passed with a
+  // PpapiMsg_PPPInstance_DidChangeView message.
+  virtual void SetLocalIsFullscreen(PP_Instance instance,
+                                    PP_Bool fullscreen) = 0;
+
+  static const SingletonResourceID kSingletonResourceID =
+      FLASH_FULLSCREEN_SINGLETON_ID;
+};
+
+}  // namespace thunk
+}  // namespace ppapi
+
+#endif // PPAPI_THUNK_PPB_FLASH_FULLSCREEN_API_H_

diff --git a/content/browser/plugin_service_impl.cc b/content/browser/plugin_service_impl.cc
index 602c95af9b58e..edb91225984c2 100644
--- a/content/browser/plugin_service_impl.cc
+++ b/content/browser/plugin_service_impl.cc
@@ -123,6 +123,7 @@ int PluginServiceImpl::CountPpapiPluginProcessesForProfile(
 
 PpapiPluginProcessHost* PluginServiceImpl::FindOrStartPpapiPluginProcess(
     int render_process_id,
+    const url::Origin& embedder_origin,
     const base::FilePath& plugin_path,
     const base::FilePath& profile_data_directory,
     const std::optional<url::Origin>& origin_lock) {
@@ -141,6 +142,12 @@ PpapiPluginProcessHost* PluginServiceImpl::FindOrStartPpapiPluginProcess(
     return nullptr;
   }
 
+  // Validate that |embedder_origin| is allowed to embed the plugin.
+  if (!GetContentClient()->browser()->ShouldAllowPluginCreation(embedder_origin,
+                                                                *info)) {
+    return nullptr;
+  }
+
   PpapiPluginProcessHost* plugin_host =
       FindPpapiPluginProcess(plugin_path, profile_data_directory, origin_lock);
   if (plugin_host)
@@ -166,14 +173,16 @@ PpapiPluginProcessHost* PluginServiceImpl::FindOrStartPpapiPluginProcess(
 
 void PluginServiceImpl::OpenChannelToPpapiPlugin(
     int render_process_id,
+    const url::Origin& embedder_origin,
     const base::FilePath& plugin_path,
     const base::FilePath& profile_data_directory,
     const std::optional<url::Origin>& origin_lock,
     PpapiPluginProcessHost::PluginClient* client) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
   PpapiPluginProcessHost* plugin_host = FindOrStartPpapiPluginProcess(
-      render_process_id, plugin_path, profile_data_directory, origin_lock);
+      render_process_id, embedder_origin, plugin_path, profile_data_directory,
+      origin_lock);
   if (plugin_host) {
     plugin_host->OpenChannelToPlugin(client);
   } else {
diff --git a/content/browser/plugin_service_impl.h b/content/browser/plugin_service_impl.h
index f0e36ba05475f..9f256a7fe48db 100644
--- a/content/browser/plugin_service_impl.h
+++ b/content/browser/plugin_service_impl.h
@@ -87,6 +87,7 @@ class CONTENT_EXPORT PluginServiceImpl : public PluginService {
   // is NULL.
   PpapiPluginProcessHost* FindOrStartPpapiPluginProcess(
       int render_process_id,
+      const url::Origin& embedder_origin,
       const base::FilePath& plugin_path,
       const base::FilePath& profile_data_directory,
       const std::optional<url::Origin>& origin_lock);
@@ -95,6 +96,7 @@ class CONTENT_EXPORT PluginServiceImpl : public PluginService {
   // Opens a channel to a plugin process for the given mime type, starting
   // a new plugin process if necessary.
   void OpenChannelToPpapiPlugin(int render_process_id,
+                                const url::Origin& embedder_origin,
                                 const base::FilePath& plugin_path,
                                 const base::FilePath& profile_data_directory,
                                 const std::optional<url::Origin>& origin_lock,
diff --git a/content/browser/plugin_service_impl_browsertest.cc b/content/browser/plugin_service_impl_browsertest.cc
index 25d70018202f5..2b2ea99efc54d 100644
--- a/content/browser/plugin_service_impl_browsertest.cc
+++ b/content/browser/plugin_service_impl_browsertest.cc
@@ -86,7 +86,8 @@ class PluginServiceImplBrowserTest : public ContentBrowserTest {
 
     PluginServiceImpl* service = PluginServiceImpl::GetInstance();
     service->OpenChannelToPpapiPlugin(
-        /*render_process_id=*/0, plugin_path_, profile_dir_, origin, client);
+        /*render_process_id=*/0, /*embedder_origin=*/url::Origin(),
+        plugin_path_, profile_dir_, origin, client);
     client->WaitForQuit();
     client->SetRunLoop(nullptr);
   }
diff --git a/content/browser/renderer_host/pepper/pepper_renderer_connection.cc b/content/browser/renderer_host/pepper/pepper_renderer_connection.cc
index 1123a29398314..3e1c2ae15ef4a 100644
--- a/content/browser/renderer_host/pepper/pepper_renderer_connection.cc
+++ b/content/browser/renderer_host/pepper/pepper_renderer_connection.cc
@@ -353,7 +353,8 @@ void PepperRendererConnection::OpenChannelToPepperPlugin(
   }
 
   plugin_service_->OpenChannelToPpapiPlugin(
-      render_process_id_, path, profile_data_directory_, origin_lock,
+      render_process_id_, embedder_origin, path, profile_data_directory_,
+      origin_lock,
       new OpenChannelToPpapiPluginCallback(this, std::move(callback)));
 }
 
diff --git a/content/public/browser/content_browser_client.cc b/content/public/browser/content_browser_client.cc
index 5f50e84d4539c..6f443c293cec7 100644
--- a/content/public/browser/content_browser_client.cc
+++ b/content/public/browser/content_browser_client.cc
@@ -1260,6 +1260,14 @@ bool ContentBrowserClient::CanEnterFullscreenWithoutUserActivation() {
   std::move(callback).Run(metadata.format_type, data, std::nullopt);
 }
 
+#if BUILDFLAG(ENABLE_PLUGINS)
+bool ContentBrowserClient::ShouldAllowPluginCreation(
+    const url::Origin& embedder_origin,
+    const content::ContentPluginInfo& plugin_info) {
+  return true;
+}
+#endif
+
 #if BUILDFLAG(ENABLE_VR)
 XrIntegrationClient* ContentBrowserClient::GetXrIntegrationClient() {
   return nullptr;
diff --git a/content/public/browser/content_browser_client.h b/content/public/browser/content_browser_client.h
index 614766cd642ef..cadbd44a85b61 100644
--- a/content/public/browser/content_browser_client.h
+++ b/content/public/browser/content_browser_client.h
@@ -45,6 +45,7 @@
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/remote.h"
 #include "mojo/public/cpp/system/message_pipe.h"
+#include "ppapi/buildflags/buildflags.h"
 #include "net/base/schemeful_site.h"
 #include "net/cookies/cookie_setting_override.h"
 #include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-forward.h"
@@ -239,6 +240,7 @@ class XrIntegrationClient;
 struct GlobalRenderFrameHostId;
 struct GlobalRequestID;
 struct OpenURLParams;
+struct ContentPluginInfo;
 struct Referrer;
 struct ServiceWorkerVersionBaseInfo;
 struct SocketPermissionRequest;
@@ -2148,6 +2150,14 @@ class CONTENT_EXPORT ContentBrowserClient {
       const ClipboardPasteData& data,
       IsClipboardCopyAllowedCallback callback);
 
+#if BUILDFLAG(ENABLE_PLUGINS)
+  // Returns true if |embedder_origin| is allowed to embed a plugin described by
+  // |plugin_info|.  This method allows restricting some internal plugins (like
+  // Chrome's PDF plugin) to specific origins.
+  virtual bool ShouldAllowPluginCreation(const url::Origin& embedder_origin,
+                                         const ContentPluginInfo& plugin_info);
+#endif
+
 #if BUILDFLAG(ENABLE_VR)
   // Allows the embedder to provide mechanisms to integrate with WebXR
   // functionality.

diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index f9e582d80308b..699e324ed05c5 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -5020,6 +5020,9 @@ std::wstring ChromeContentBrowserClient::GetAppContainerSidForSandboxType(
       return std::wstring();
     case sandbox::mojom::Sandbox::kOnDeviceModelExecution:
       return std::wstring();
+#if BUILDFLAG(ENABLE_PPAPI)
+    case sandbox::mojom::Sandbox::kPpapi:
+#endif
     case sandbox::mojom::Sandbox::kNoSandbox:
     case sandbox::mojom::Sandbox::kNoSandboxAndElevatedPrivileges:
     case sandbox::mojom::Sandbox::kXrCompositing:
@@ -5188,6 +5188,9 @@ bool ChromeContentBrowserClient::PreSpawnChild(
       break;
     case sandbox::mojom::Sandbox::kUtility:
     case sandbox::mojom::Sandbox::kGpu:
+#if BUILDFLAG(ENABLE_PPAPI)
+    case sandbox::mojom::Sandbox::kPpapi:
+#endif
     case sandbox::mojom::Sandbox::kNoSandbox:
     case sandbox::mojom::Sandbox::kNoSandboxAndElevatedPrivileges:
     case sandbox::mojom::Sandbox::kXrCompositing:
diff --git a/content/browser/ppapi_plugin_process_host.cc b/content/browser/ppapi_plugin_process_host.cc
index 24b92e0c3dd40..91ac67a3f7798 100644
--- a/content/browser/ppapi_plugin_process_host.cc
+++ b/content/browser/ppapi_plugin_process_host.cc
@@ -272,8 +272,6 @@ bool PpapiPluginProcessHost::Init(const ContentPluginInfo& info) {
   cmd_line->AppendSwitchASCII(
       switches::kPpapiSubpixelRenderingSetting,
       base::NumberToString(font_params.subpixel_rendering));
-
-  LOG(WARNING) << "Ppapi sandbox on Windows is not supported.";
 #endif
 
   if (!plugin_launcher.empty())
diff --git a/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate.cc b/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate.cc
index e6d53860847b2..62cc6bca47934 100644
--- a/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate.cc
+++ b/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate.cc
@@ -11,7 +11,46 @@
 #include "content/public/common/content_switches.h"
 #include "sandbox/policy/mojom/sandbox.mojom.h"
 
+#if BUILDFLAG(IS_WIN)
+#include "sandbox/policy/win/sandbox_win.h"
+#include "sandbox/win/src/process_mitigations.h"
+#include "sandbox/win/src/sandbox_policy.h"
+#include "ui/display/win/dpi.h"
+#include "ui/gfx/font_render_params.h"
+#endif
+
 namespace content {
+#if BUILDFLAG(IS_WIN)
+std::string PpapiPluginSandboxedProcessLauncherDelegate::GetSandboxTag() {
+  return sandbox::policy::SandboxWin::GetSandboxTagForDelegate(
+      "ppapi", GetSandboxType());
+}
+
+bool PpapiPluginSandboxedProcessLauncherDelegate::InitializeConfig(
+    sandbox::TargetConfig* config) {
+  DCHECK(!config->IsConfigured());
+
+  // The Pepper process is as locked-down as a renderer except that it can
+  // create the server side of Chrome pipes.
+  sandbox::ResultCode result;
+  result = sandbox::policy::SandboxWin::AddWin32kLockdownPolicy(config);
+  if (result != sandbox::SBOX_ALL_OK) {
+    return false;
+  }
+
+  // No plugins can generate executable code.
+  sandbox::MitigationFlags flags = config->GetDelayedProcessMitigations();
+  flags |= sandbox::MITIGATION_DYNAMIC_CODE_DISABLE;
+  if (sandbox::SBOX_ALL_OK != config->SetDelayedProcessMitigations(flags))
+    return false;
+
+  return true;
+}
+
+bool PpapiPluginSandboxedProcessLauncherDelegate::AllowWindowsFontsDir() {
+  return true;
+}
+#endif  // BUILDFLAG(IS_WIN)
 
 #if BUILDFLAG(USE_ZYGOTE)
 ZygoteCommunication* PpapiPluginSandboxedProcessLauncherDelegate::GetZygote() {
@@ -27,11 +66,7 @@ ZygoteCommunication* PpapiPluginSandboxedProcessLauncherDelegate::GetZygote() {
 
 sandbox::mojom::Sandbox
 PpapiPluginSandboxedProcessLauncherDelegate::GetSandboxType() {
-#if BUILDFLAG(IS_WIN)
-  return sandbox::mojom::Sandbox::kNoSandbox;
-#else
   return sandbox::mojom::Sandbox::kPpapi;
-#endif
 }
 
 #if BUILDFLAG(IS_MAC)
diff --git a/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate.h b/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate.h
index d203e0131dbac..604413790528b 100644
--- a/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate.h
+++ b/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate.h
@@ -28,6 +28,12 @@ class CONTENT_EXPORT PpapiPluginSandboxedProcessLauncherDelegate
 
   ~PpapiPluginSandboxedProcessLauncherDelegate() override = default;
 
+#if BUILDFLAG(IS_WIN)
+  std::string GetSandboxTag() override;
+  bool InitializeConfig(sandbox::TargetConfig* config) override;
+  bool AllowWindowsFontsDir() override;
+#endif  // BUILDFLAG(IS_WIN)
+
 #if BUILDFLAG(USE_ZYGOTE)
   ZygoteCommunication* GetZygote() override;
 #endif  // BUILDFLAG(USE_ZYGOTE)
diff --git a/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate_unittest.cc b/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate_unittest.cc
new file mode 100644
index 0000000000000..bdc7e102e9d79
--- /dev/null
+++ b/content/browser/ppapi_plugin_sandboxed_process_launcher_delegate_unittest.cc
@@ -0,0 +1,59 @@
+// Copyright 2021 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "content/browser/ppapi_plugin_sandboxed_process_launcher_delegate.h"
+
+#include "sandbox/policy/switches.h"
+#include "sandbox/policy/win/sandbox_policy_feature_test.h"
+#include "sandbox/policy/win/sandbox_win.h"
+#include "sandbox/win/src/app_container_base.h"
+#include "sandbox/win/src/sandbox_factory.h"
+#include "sandbox/win/src/sandbox_policy.h"
+#include "sandbox/win/src/sandbox_policy_base.h"
+#include "testing/gtest/include/gtest/gtest.h"
+
+namespace content::sandbox::policy {
+
+class PpapiPluginFeatureSandboxWinTest
+    : public ::sandbox::policy::SandboxFeatureTest {
+ public:
+  PpapiPluginFeatureSandboxWinTest() = default;
+
+  ::sandbox::MitigationFlags GetExpectedDelayedMitigationFlags() override {
+    ::sandbox::MitigationFlags flags =
+        SandboxFeatureTest::GetExpectedDelayedMitigationFlags() |
+        ::sandbox::MITIGATION_DYNAMIC_CODE_DISABLE;
+    return flags;
+  }
+};
+
+TEST_P(PpapiPluginFeatureSandboxWinTest, PpapiGeneratedPolicyTest) {
+  base::CommandLine cmd_line(base::CommandLine::NO_PROGRAM);
+  base::HandlesToInheritVector handles_to_inherit;
+  ::sandbox::BrokerServices* broker =
+      ::sandbox::SandboxFactory::GetBrokerServices();
+  auto policy = broker->CreatePolicy();
+
+  PpapiPluginSandboxedProcessLauncherDelegate test_ppapi_delegate;
+
+  // PreSpawn
+  ::sandbox::ResultCode result =
+      ::sandbox::policy::SandboxWin::GeneratePolicyForSandboxedProcess(
+          cmd_line, ::sandbox::policy::switches::kPpapiSandbox,
+          handles_to_inherit, &test_ppapi_delegate, policy.get());
+  ASSERT_EQ(::sandbox::ResultCode::SBOX_ALL_OK, result);
+
+  ValidateSecurityLevels(policy->GetConfig());
+  ValidatePolicyFlagSettings(policy->GetConfig());
+  ValidateAppContainerSettings(policy->GetConfig());
+}
+
+INSTANTIATE_TEST_SUITE_P(
+    PpapiPluginSandboxSettings,
+    PpapiPluginFeatureSandboxWinTest,
+    ::testing::Combine(
+        /* renderer app container feature */ ::testing::Bool(),
+        /* ktm mitigation feature */ ::testing::Bool()));
+
+}  // namespace content::sandbox::policy
diff --git a/content/browser/utility_sandbox_delegate.cc b/content/browser/utility_sandbox_delegate.cc
index 68fe36bae8af7..ad04359ead729 100644
--- a/content/browser/utility_sandbox_delegate.cc
+++ b/content/browser/utility_sandbox_delegate.cc
@@ -70,7 +70,7 @@ UtilitySandboxedProcessLauncherDelegate::
       sandbox_type_ == sandbox::mojom::Sandbox::kPrintBackend ||
 #endif
       sandbox_type_ == sandbox::mojom::Sandbox::kPrintCompositor ||
-#if BUILDFLAG(ENABLE_PPAPI) && !BUILDFLAG(IS_WIN)
+#if BUILDFLAG(ENABLE_PPAPI)
       sandbox_type_ == sandbox::mojom::Sandbox::kPpapi ||
 #endif
 #if BUILDFLAG(IS_FUCHSIA)
diff --git a/content/test/BUILD.gn b/content/test/BUILD.gn
index 8bb052ea4465c..d0a14b0855780 100644
--- a/content/test/BUILD.gn
+++ b/content/test/BUILD.gn
@@ -3277,6 +3277,9 @@ test("content_unittests") {
       "../renderer/pepper/mock_resource.h",
       "../renderer/pepper/v8_var_converter_unittest.cc",
     ]
+    if (is_win) {
+      sources += [ "../browser/ppapi_plugin_sandboxed_process_launcher_delegate_unittest.cc" ]
+    }
     deps += [
       "//ppapi/c",
       "//ppapi/host",
diff --git a/ppapi/BUILD.gn b/ppapi/BUILD.gn
index c2a4ff3335cc7..078c131c85700 100644
--- a/ppapi/BUILD.gn
+++ b/ppapi/BUILD.gn
@@ -15,10 +15,6 @@ if (is_mac) {
 
 assert(enable_ppapi)
 
-# PPAPI is not supported (e.g. there is no effective sandbox) and must not be
-# shipped for Chrome on Windows.
-assert(!(is_win && is_official_build))
-
 # Test files shared between several targets below.
 #
 # TODO(brettw) it seems like it should be possible to factor this in a source
diff --git a/sandbox/policy/mojom/BUILD.gn b/sandbox/policy/mojom/BUILD.gn
index fe3612b35851a..743f71ec5cd65 100644
--- a/sandbox/policy/mojom/BUILD.gn
+++ b/sandbox/policy/mojom/BUILD.gn
@@ -28,8 +28,8 @@ mojom("mojom") {
   if (enable_oop_printing) {
     enabled_features += [ "enable_oop_printing" ]
   }
-  if (enable_ppapi && !is_win) {
-    enabled_features += [ "enable_ppapi_sandbox" ]
+  if (enable_ppapi) {
+    enabled_features += [ "enable_ppapi" ]
   }
   if (is_linux || is_mac) {
     enabled_features += [ "is_linux_or_mac" ]
diff --git a/sandbox/policy/mojom/sandbox.mojom b/sandbox/policy/mojom/sandbox.mojom
index 803f61c7a6c50..ea2cfa3d7bd23 100644
--- a/sandbox/policy/mojom/sandbox.mojom
+++ b/sandbox/policy/mojom/sandbox.mojom
@@ -72,8 +72,8 @@ enum Sandbox {
   [EnableIf=enable_screen_ai_service]
   kScreenAI,
 
-  // The PPAPI plugin process. (Unsandboxed on Windows.)
-  [EnableIf=enable_ppapi_sandbox]
+  // The PPAPI plugin process.
+  [EnableIf=enable_ppapi]
   kPpapi,
 
   // Equivalent to no sandbox on all non-Fuchsia platforms.
diff --git a/sandbox/policy/sandbox_type.cc b/sandbox/policy/sandbox_type.cc
index f791dc5c67035..f3dc2e9494cb2 100644
--- a/sandbox/policy/sandbox_type.cc
+++ b/sandbox/policy/sandbox_type.cc
@@ -51,7 +51,7 @@ bool IsUnsandboxedSandboxType(Sandbox sandbox_type) {
     case Sandbox::kServiceWithJit:
     case Sandbox::kUtility:
     case Sandbox::kGpu:
-#if BUILDFLAG(ENABLE_PPAPI) && !BUILDFLAG(IS_WIN)
+#if BUILDFLAG(ENABLE_PPAPI)
     case Sandbox::kPpapi:
 #endif
     case Sandbox::kCdm:
@@ -110,7 +110,7 @@ void SetCommandLineFlagsForSandboxType(base::CommandLine* command_line,
       DCHECK(command_line->GetSwitchValueASCII(switches::kProcessType) ==
              switches::kGpuProcess);
       break;
-#if BUILDFLAG(ENABLE_PPAPI) && !BUILDFLAG(IS_WIN)
+#if BUILDFLAG(ENABLE_PPAPI)
     case Sandbox::kPpapi:
       if (command_line->GetSwitchValueASCII(switches::kProcessType) ==
           switches::kUtilityProcess) {
@@ -205,7 +205,7 @@ sandbox::mojom::Sandbox SandboxTypeFromCommandLine(
     return Sandbox::kGpu;
   }
 
-#if BUILDFLAG(ENABLE_PPAPI) && !BUILDFLAG(IS_WIN)
+#if BUILDFLAG(ENABLE_PPAPI)
   if (process_type == switches::kPpapiPluginProcess)
     return Sandbox::kPpapi;
 #endif
@@ -247,7 +247,7 @@ std::string StringFromUtilitySandboxType(Sandbox sandbox_type) {
       return switches::kNetworkSandbox;
     case Sandbox::kOnDeviceModelExecution:
       return switches::kOnDeviceModelExecutionSandbox;
-#if BUILDFLAG(ENABLE_PPAPI) && !BUILDFLAG(IS_WIN)
+#if BUILDFLAG(ENABLE_PPAPI)
     case Sandbox::kPpapi:
       return switches::kPpapiSandbox;
 #endif
@@ -356,7 +356,7 @@ sandbox::mojom::Sandbox UtilitySandboxTypeFromString(
   if (sandbox_string == switches::kOnDeviceModelExecutionSandbox) {
     return Sandbox::kOnDeviceModelExecution;
   }
-#if BUILDFLAG(ENABLE_PPAPI) && !BUILDFLAG(IS_WIN)
+#if BUILDFLAG(ENABLE_PPAPI)
   if (sandbox_string == switches::kPpapiSandbox)
     return Sandbox::kPpapi;
 #endif
diff --git a/sandbox/policy/sandbox_type_unittest.cc b/sandbox/policy/sandbox_type_unittest.cc
index a433866b0502f..ee39d46efeea4 100644
--- a/sandbox/policy/sandbox_type_unittest.cc
+++ b/sandbox/policy/sandbox_type_unittest.cc
@@ -61,7 +61,7 @@ TEST(SandboxTypeTest, Utility) {
   SetCommandLineFlagsForSandboxType(&command_line4, Sandbox::kNoSandbox);
   EXPECT_EQ(Sandbox::kNoSandbox, SandboxTypeFromCommandLine(command_line4));
 
-#if BUILDFLAG(ENABLE_PPAPI) && !BUILDFLAG(IS_WIN)
+#if BUILDFLAG(ENABLE_PPAPI)
   base::CommandLine command_line5(command_line);
   SetCommandLineFlagsForSandboxType(&command_line5, Sandbox::kPpapi);
   EXPECT_EQ(Sandbox::kPpapi, SandboxTypeFromCommandLine(command_line5));
@@ -154,7 +154,7 @@ TEST(SandboxTypeTest, GPU) {
   EXPECT_EQ(Sandbox::kNoSandbox, SandboxTypeFromCommandLine(command_line));
 }
 
-#if BUILDFLAG(ENABLE_PPAPI) && !BUILDFLAG(IS_WIN)
+#if BUILDFLAG(ENABLE_PPAPI)
 TEST(SandboxTypeTest, PPAPIPlugin) {
   base::CommandLine command_line(base::CommandLine::NO_PROGRAM);
   command_line.AppendSwitchASCII(switches::kProcessType,
diff --git a/sandbox/policy/win/sandbox_win.cc b/sandbox/policy/win/sandbox_win.cc
index a63046248acda..aecdbe31e3ddc 100644
--- a/sandbox/policy/win/sandbox_win.cc
+++ b/sandbox/policy/win/sandbox_win.cc
@@ -1062,6 +1062,10 @@ std::string SandboxWin::GetSandboxTypeInEnglish(Sandbox sandbox_type) {
       return "Utility";
     case Sandbox::kGpu:
       return "GPU";
+#if BUILDFLAG(ENABLE_PPAPI)
+    case Sandbox::kPpapi:
+      return "PPAPI";
+#endif
     case Sandbox::kNetwork:
       return "Network";
     case Sandbox::kOnDeviceModelExecution:

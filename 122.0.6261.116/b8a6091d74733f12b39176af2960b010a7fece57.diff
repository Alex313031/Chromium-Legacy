commit b8a6091d74733f12b39176af2960b010a7fece57
Author: John Doe <jdoe@email.com>
Date:   Sun Feb 11 23:43:57 2024 +0800

    win7dep: Use WindowsCreateStringReference directly    2023-02-16 02:15:03    b391bab75038dfa9ebc2cb2fcad8e58cc8956ea0

diff --git a/base/win/hstring_compare_unittest.cc b/base/win/hstring_compare_unittest.cc
index d737240f1b5ab..e9ec3fb5f5074 100644
--- a/base/win/hstring_compare_unittest.cc
+++ b/base/win/hstring_compare_unittest.cc
@@ -18,6 +18,8 @@ constexpr wchar_t kTestString1234[] = L"1234";
 }  // namespace
 
 TEST(HStringCompareTest, FirstStringBeforeSecondString) {
+  ASSERT_TRUE(HStringReference::ResolveCoreWinRTStringDelayload());
+
   const HStringReference string12(kTestString12);
   const HStringReference string123(kTestString123);
   INT32 result;
@@ -27,6 +29,8 @@ TEST(HStringCompareTest, FirstStringBeforeSecondString) {
 }
 
 TEST(HStringCompareTest, StringsEqual) {
+  ASSERT_TRUE(HStringReference::ResolveCoreWinRTStringDelayload());
+
   const HStringReference string123(kTestString123);
   INT32 result;
   HRESULT hr = HStringCompare(string123.Get(), string123.Get(), &result);
@@ -35,6 +39,8 @@ TEST(HStringCompareTest, StringsEqual) {
 }
 
 TEST(HStringCompareTest, FirstStringAfterSecondString) {
+  ASSERT_TRUE(HStringReference::ResolveCoreWinRTStringDelayload());
+
   const HStringReference string123(kTestString123);
   const HStringReference string1234(kTestString1234);
   INT32 result;
diff --git a/base/win/hstring_reference.cc b/base/win/hstring_reference.cc
index b254fc64310a1..8e4506d08a188 100644
--- a/base/win/hstring_reference.cc
+++ b/base/win/hstring_reference.cc
@@ -12,18 +12,51 @@
 #include "base/check_op.h"
 #include "base/numerics/safe_conversions.h"
 
-namespace base::win {
+namespace base {
+namespace {
+
+bool g_winrt_string_loaded = false;
+
+decltype(&::WindowsCreateStringReference) GetWindowsCreateStringReference() {
+  static auto const create_string_reference_func =
+      []() -> decltype(&::WindowsCreateStringReference) {
+    const HMODULE handle =
+        ::LoadLibraryEx(L"combase.dll", nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);
+    if (handle) {
+      return reinterpret_cast<decltype(&::WindowsCreateStringReference)>(
+          ::GetProcAddress(handle, "WindowsCreateStringReference"));
+    }
+    return nullptr;
+  }();
+  return create_string_reference_func;
+}
+
+}  // namespace
+
+namespace win {
+
+// static
+bool HStringReference::ResolveCoreWinRTStringDelayload() {
+  g_winrt_string_loaded = GetWindowsCreateStringReference() != nullptr;
+  return g_winrt_string_loaded;
+}
 
 HStringReference::HStringReference(const wchar_t* str, size_t length) {
+  DCHECK(g_winrt_string_loaded);
   // String must be null terminated for WindowsCreateStringReference.
   // nullptr str is OK so long as the length is 0.
   DCHECK(str ? str[length] == L'\0' : length == 0);
-  const HRESULT hr = ::WindowsCreateStringReference(
+  // If you nullptr crash here, you've failed to call
+  // ResolveCoreWinRTStringDelayLoad and check its return value.
+  const HRESULT hr = GetWindowsCreateStringReference()(
       str, checked_cast<UINT32>(length), &hstring_header_, &hstring_);
+  // All failure modes of WindowsCreateStringReference are handled gracefully
+  // but this class.
   DCHECK_EQ(hr, S_OK);
 }
 
 HStringReference::HStringReference(const wchar_t* str)
     : HStringReference(str, str ? wcslen(str) : 0) {}
 
-}  // namespace base::win
+}  // namespace win
+}  // namespace base
diff --git a/base/win/hstring_reference.h b/base/win/hstring_reference.h
index 3cde4acef6f2e..2366a681e72c0 100644
--- a/base/win/hstring_reference.h
+++ b/base/win/hstring_reference.h
@@ -9,7 +9,8 @@
 
 #include "base/base_export.h"
 
-namespace base::win {
+namespace base {
+namespace win {
 
 // HStringReference is an HSTRING representation of a null terminated
 // string backed by memory that outlives the HStringReference instance.
@@ -17,12 +18,31 @@ namespace base::win {
 // If you need an HSTRING class that manages its own memory, you should
 // use ScopedHString instead.
 //
+// Note that HStringReference requires certain functions that are only
+// available on Windows 8 and later, and that these functions need to be
+// delayloaded to avoid breaking Chrome on Windows 7.
+//
+// Callers MUST check the return value of ResolveCoreWinRTStringDelayLoad()
+// *before* using HStringReference.
+//
+// One-time Initialization for HStringReference:
+//
+//   const bool success = HStringReference::ResolveCoreWinRTStringDelayload();
+//   if (success) {
+//     // HStringReference can be used.
+//   } else {
+//     // Handle error.
+//   }
+//
 // Example use:
 //
 //   HStringReference string(L"abc");
 //
 class BASE_EXPORT HStringReference {
  public:
+  // Loads all required HSTRING functions, available from Win8 and onwards.
+  static bool ResolveCoreWinRTStringDelayload();
+
   HStringReference(const wchar_t* str, size_t len);
   explicit HStringReference(const wchar_t* str);
 
@@ -47,6 +67,7 @@ class BASE_EXPORT HStringReference {
   HSTRING_HEADER hstring_header_;
 };
 
-}  // namespace base::win
+}  // namespace win
+}  // namespace base
 
 #endif  // BASE_WIN_HSTRING_REFERENCE_H_
diff --git a/base/win/hstring_reference_unittest.cc b/base/win/hstring_reference_unittest.cc
index 2c1f1afd58ab9..bd6ee88008bc0 100644
--- a/base/win/hstring_reference_unittest.cc
+++ b/base/win/hstring_reference_unittest.cc
@@ -26,6 +26,7 @@ void VerifyHSTRINGEquals(HSTRING hstring, const wchar_t* test_string) {
 }  // namespace
 
 TEST(HStringReferenceTest, Init) {
+  EXPECT_TRUE(HStringReference::ResolveCoreWinRTStringDelayload());
   EXPECT_TRUE(ScopedHString::ResolveCoreWinRTStringDelayload());
 
   const HStringReference string(kTestString);
diff --git a/base/win/map_unittest.cc b/base/win/map_unittest.cc
index 4a5c7148211b1..86e2b57a5903b 100644
--- a/base/win/map_unittest.cc
+++ b/base/win/map_unittest.cc
@@ -188,7 +188,8 @@ const std::map<int, double, internal::Less> g_two{{1, 10.7}, {2, 20.3}};
 
 bool ResolveCoreWinRT() {
   return base::win::ResolveCoreWinRTDelayload() &&
-         base::win::ScopedHString::ResolveCoreWinRTStringDelayload();
+         base::win::ScopedHString::ResolveCoreWinRTStringDelayload() &&
+         base::win::HStringReference::ResolveCoreWinRTStringDelayload();
 }
 
 HRESULT GetPropertyValueStaticsActivationFactory(
diff --git a/components/embedder_support/user_agent_utils_unittest.cc b/components/embedder_support/user_agent_utils_unittest.cc
index 125e03715eecb..e20022114a70c 100644
--- a/components/embedder_support/user_agent_utils_unittest.cc
+++ b/components/embedder_support/user_agent_utils_unittest.cc
@@ -258,7 +258,8 @@ void CheckUserAgentStringOrdering(bool mobile_device) {
 #if BUILDFLAG(IS_WIN)
 bool ResolveCoreWinRT() {
   return base::win::ResolveCoreWinRTDelayload() &&
-         base::win::ScopedHString::ResolveCoreWinRTStringDelayload();
+         base::win::ScopedHString::ResolveCoreWinRTStringDelayload() &&
+         base::win::HStringReference::ResolveCoreWinRTStringDelayload();
 }
 
 // On Windows, the client hint sec-ch-ua-platform-version should be
diff --git a/device/gamepad/wgi_data_fetcher_win.cc b/device/gamepad/wgi_data_fetcher_win.cc
index a215ae7f06fc7..d0934ea1e1e86 100644
--- a/device/gamepad/wgi_data_fetcher_win.cc
+++ b/device/gamepad/wgi_data_fetcher_win.cc
@@ -12,7 +12,6 @@
 #include <algorithm>
 #include <memory>
 #include <string>
-#include <utility>
 
 #include "base/containers/cxx20_erase.h"
 #include "base/containers/flat_map.h"
@@ -210,6 +209,12 @@ GamepadSource WgiDataFetcherWin::source() {
 
 void WgiDataFetcherWin::OnAddedToProvider() {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  if (!base::win::HStringReference::ResolveCoreWinRTStringDelayload()) {
+    initialization_state_ =
+        InitializationState::kCoreWinrtStringDelayLoadFailed;
+    return;
+  }
+
   HRESULT hr = get_activation_factory_function_(
       base::win::HStringReference(RuntimeClass_Windows_Gaming_Input_Gamepad)
           .Get(),
diff --git a/device/gamepad/wgi_data_fetcher_win.h b/device/gamepad/wgi_data_fetcher_win.h
index a5a27848749a2..450ad10130f76 100644
--- a/device/gamepad/wgi_data_fetcher_win.h
+++ b/device/gamepad/wgi_data_fetcher_win.h
@@ -36,6 +36,7 @@ class DEVICE_GAMEPAD_EXPORT WgiDataFetcherWin final
     kAddGamepadAddedFailed,
     kAddGamepadRemovedFailed,
     kRoGetActivationFactoryFailed,
+    kCoreWinrtStringDelayLoadFailed,
   };
 
   using Factory =
diff --git a/ui/views/win/pen_id_handler.cc b/ui/views/win/pen_id_handler.cc
index 3327d96ad2970..72c351e878108 100644
--- a/ui/views/win/pen_id_handler.cc
+++ b/ui/views/win/pen_id_handler.cc
@@ -41,6 +41,10 @@ class PenIdStatics {
     }
     SCOPED_MAY_LOAD_LIBRARY_AT_BACKGROUND_PRIORITY();
     base::win::AssertComInitialized();
+    if (!base::win::HStringReference::ResolveCoreWinRTStringDelayload()) {
+      return;
+    }
+
     base::win::RoGetActivationFactory(
         base::win::HStringReference(
             RuntimeClass_Windows_Devices_Input_PenDevice)
